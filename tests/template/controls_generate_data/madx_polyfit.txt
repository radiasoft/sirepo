#!/usr/bin/env python

# -*- python -*-
from pykern import pkio
from pykern.pkcollections import PKDict
from pykern.pkdebug import pkdp, pkdlog
from sirepo.sim_data.controls import AmpConverter
from sirepo.template import particle_beam
import numpy
import os
import re
import requests
import scipy.optimize
import sirepo.template.madx
import subprocess
import time

_FAIL_COST = 1e24

targets = numpy.array([
    # [target value, weight]
    [0, 0.1],
    [0, 0.1],
    [0, 0.2],
    [0, 0.2],
    [0, 0.3],
    [0, 0.3],
    [0, 0.4],
    [0, 0.4],
    [0, 0.5],
    [0, 0.5],
])


def _assert_update_and_read_results(correctors, failure_message):
    readings, cost = _update_and_read_results(correctors)
    if cost == _FAIL_COST:
        raise AssertionError(failure_message)
    return readings, cost


def _failed_sim_results():
    return numpy.full(10, _FAIL_COST), _FAIL_COST


def _update_summary_csv(correctors, readings):
    cost = numpy.sqrt(numpy.mean(((readings - targets[:,0]) * 1000) ** 2 * targets[:,1] / numpy.sum(targets[:,1])))
    with open('summary.csv', 'a') as f:
        f.write('{},{}\n'.format(','.join([str(x) for x in correctors + readings]), cost))
    return readings, cost


def _optimize_polyfit(variable_count):
    settings_0 = numpy.zeros(variable_count)
    sets = numpy.identity(variable_count)
    M = numpy.zeros([variable_count, len(targets)])
    sets_a = numpy.linspace(-5, 5, 5) * 0.00001
    readings = numpy.zeros([len(targets), 5])
    for i in range(0, len(settings_0)):
        for j in range(0, len(sets_a)):
            setting_test = sets[i,:] * sets_a[j]
            r, cost = _assert_update_and_read_results(setting_test, 'Linear optimization step failed')
            readings[:,j] = r
        for k in range(0, len(targets)):
            M[i,k] = numpy.polyfit(sets_a, readings[k,:], 1)[0]
    # inverse response matrix
    MI = numpy.linalg.pinv(M.T)
    # reset the beam-line
    readings_1, cost = _assert_update_and_read_results(settings_0, 'Linear optimization reset failed')
    # create settings to cancel out offsets
    new_sets = numpy.dot(MI, -numpy.array(readings_1))
    _assert_update_and_read_results(new_sets[:variable_count], 'Final optimization failed')
    return {
        'message': '',
        'success': True,
        'result': new_sets,
    }


def _run_optimizer():
    _optimize_polyfit(8)

with open('summary.csv', 'w') as f:
    f.write('{}\n'.format('el_102.current_hkick,el_102.current_vkick,el_103.current_hkick,el_103.current_vkick,el_104.current_hkick,el_104.current_vkick,el_105.current_hkick,el_105.current_vkick,el_106.x,el_106.y,el_135.x,el_135.y,el_147.x,el_147.y,el_155.x,el_155.y,el_165.x,el_165.y,cost'))

lattice_file = """
option,echo=false,info=false;
title, "fodo with ending monitor and instruments";

REAL sr_alpha_x = 1;
REAL sr_alpha_y = 1;
REAL sr_beta_x = 10;
REAL sr_beta_y = 10;
REAL sr_dp_s_coupling = 0;
REAL sr_gamma_x = 0.2;
REAL sr_gamma_y = 0.2;
REAL sr_n_particles_per_bunch = 5000;

D1: DRIFT,l=0.1;
I1: INSTRUMENT;
HV_KICKER_1: KICKER,hkick:={sr_opt0},vkick:={sr_opt1};
HV_KICKER_2: KICKER,hkick:={sr_opt2},vkick:={sr_opt3};
HV_KICKER_3: KICKER,hkick:={sr_opt4},vkick:={sr_opt5};
HV_KICKER_4: KICKER,hkick:={sr_opt6},vkick:={sr_opt7};
BPM_1: MONITOR;
D_QUAD: QUADRUPOLE,k1=5,l=0.05;
F_QUAD: QUADRUPOLE,k1=-5,l=0.05;
D2: DRIFT,l=0.1;
D3: DRIFT,l=0.1;
D4: DRIFT,l=0.1;
D5: DRIFT,l=0.1;
D6: DRIFT,l=0.1;
D7: DRIFT,l=0.1;
D8: DRIFT,l=0.1;
D9: DRIFT,l=0.1;
D10: DRIFT,l=0.1;
I2: INSTRUMENT;
BPM_2: MONITOR;
D11: DRIFT,l=0.1;
D12: DRIFT,l=0.1;
D13: DRIFT,l=0.1;
D14: DRIFT,l=0.1;
D15: DRIFT,l=0.1;
D16: DRIFT,l=0.1;
D17: DRIFT,l=0.1;
D18: DRIFT,l=0.1;
D19: DRIFT,l=0.1;
D20: DRIFT,l=0.1;
I3: INSTRUMENT;
BPM_3: MONITOR;
D21: DRIFT,l=0.1;
D22: DRIFT,l=0.1;
D23: DRIFT,l=0.1;
D24: DRIFT,l=0.1;
D25: DRIFT,l=0.1;
D26: DRIFT,l=0.1;
I4: INSTRUMENT;
BPM_4: MONITOR;
D27: DRIFT,l=0.1;
D28: DRIFT,l=0.1;
D29: DRIFT,l=0.1;
F_QUAD2: QUADRUPOLE,k1=-5,l=0.05;
D30: DRIFT,l=0.1;
D31: DRIFT,l=0.1;
D_QUAD2: QUADRUPOLE,k1=5,l=0.05;
D32: DRIFT,l=0.1;
I5: INSTRUMENT;
BPM_5: MONITOR;
LINE: LINE=(D1,D2,HV_KICKER_1,D3,D4,I1,BPM_1,D5,D6,D7,D8,HV_KICKER_2,D9,D10,I2,BPM_2,D11,D12,D13,F_QUAD,D14,D15,D_QUAD,D16,D17,D18,HV_KICKER_3,D19,D20,I3,BPM_3,D21,D22,D23,D24,HV_KICKER_4,D25,D26,I4,BPM_4,D27,D28,D29,F_QUAD2,D30,D31,D_QUAD2,D32,I5,BPM_5);


option,echo=false;
beam,ex=4.6e-08,ey=4.6e-08,gamma=1958.908474421938,particle=electron,sigt=0.00065;
use,sequence=LINE;
ptc_create_universe;
ptc_observe,place=D1[1];
ptc_observe,place=D2[1];
ptc_observe,place=D3[1];
ptc_observe,place=D4[1];
ptc_observe,place=I1[1];
ptc_observe,place=BPM_1[1];
ptc_observe,place=D5[1];
ptc_observe,place=D6[1];
ptc_observe,place=D7[1];
ptc_observe,place=D8[1];
ptc_observe,place=D9[1];
ptc_observe,place=D10[1];
ptc_observe,place=I2[1];
ptc_observe,place=BPM_2[1];
ptc_observe,place=D11[1];
ptc_observe,place=D12[1];
ptc_observe,place=D13[1];
ptc_observe,place=F_QUAD[1];
ptc_observe,place=D14[1];
ptc_observe,place=D15[1];
ptc_observe,place=D_QUAD[1];
ptc_observe,place=D16[1];
ptc_observe,place=D17[1];
ptc_observe,place=D18[1];
ptc_observe,place=D19[1];
ptc_observe,place=D20[1];
ptc_observe,place=I3[1];
ptc_observe,place=BPM_3[1];
ptc_observe,place=D21[1];
ptc_observe,place=D22[1];
ptc_observe,place=D23[1];
ptc_observe,place=D24[1];
ptc_observe,place=D25[1];
ptc_observe,place=D26[1];
ptc_observe,place=I4[1];
ptc_observe,place=BPM_4[1];
ptc_observe,place=D27[1];
ptc_observe,place=D28[1];
ptc_observe,place=D29[1];
ptc_observe,place=F_QUAD2[1];
ptc_observe,place=D30[1];
ptc_observe,place=D31[1];
ptc_observe,place=D_QUAD2[1];
ptc_observe,place=D32[1];
ptc_observe,place=I5[1];
ptc_observe,place=BPM_5[1];
ptc_create_layout;
call,file=ptc_particles.madx;
ptc_track,file="ptc_track.file.tfs",icase=6,onetable=true;
ptc_track_end;
ptc_end;

"""

finished_sims = False

amp_tables_by_name = PKDict({
})

amp_table_for_corrector = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
]


def _check_twiss_success():
    beam_data, observes, columns = particle_beam.read_ptc_data('ptc_track.file.tfsone')
    res = particle_beam.analyze_ptc_beam(
        beam_data,
        mc2=0.938272046,
    )
    for c in ('beta_x', 'beta_y', 'alpha_x', 'alpha_y'):
        if list(filter(lambda x: numpy.isnan(x), res[c])):
            return None, None
    return res, observes


def _read_cols_and_save_report(default_file, save_file, cols_file):
    if pkio.py_path(default_file).exists():
        cols = sirepo.template.madx.file_info(
                default_file,
                pkio.py_path('.'),
                'unused',
            ).plottableColumns
        pkio.write_text(cols_file, ','.join(cols))
        os.rename(default_file, save_file)

def _run_simulation(correctors):
    lattice = lattice_file
    values = {}
    for idx in range(len(correctors)):
        ac = AmpConverter(
            PKDict(
                particle="electron",
                gamma=1958.908474421938,
            ),
            amp_table_for_corrector[idx],
            default_factor=100,
        )
        values[f'sr_opt{idx}'] = ac.current_to_kick(correctors[idx])
    with open('in.madx', 'w') as f:
        for k in values:
            lattice = re.sub('{' + k + '}', str(values[k]), lattice)
        f.write(lattice)
    p = subprocess.run(('madx', 'in.madx'), capture_output=True, text=True)
    pkio.write_text('madx.log', p.stdout)
    pkio.write_text('madx.err', p.stderr)
    if p.returncode != 0 or p.stdout.count('is lost') == 100:
        return None, None
    return _check_twiss_success()

_MONITORS = PKDict({
    "BPM_1": "MONITOR",
    "BPM_2": "MONITOR",
    "BPM_3": "MONITOR",
    "BPM_4": "MONITOR",
    "BPM_5": "MONITOR"
})

def _update_and_read_results(correctors):
    global finished_sims
    columns, observes = _run_simulation(correctors)
    if columns:
        readings = []
        finished_sims = True
        for i in range(len(observes)):
            if observes[i] in _MONITORS:
                t = _MONITORS[observes[i]]
                if t == "MONITOR":
                    readings += [columns["x0"][i], columns["y0"][i]]
                elif t == "HMONITOR":
                    readings += [columns["x0"][i]]
                elif t == "VMONITOR":
                    readings += [columns["y0"][i]]
        _read_cols_and_save_report('ptc_track.file.tfsone', 'track.tfs', 'ptc_track_columns.txt')
        return _update_summary_csv(correctors.tolist(), readings)
    return _failed_sim_results()

_run_optimizer()

if not finished_sims:
    raise AssertionError('Optimization failed all minimization attempts')
