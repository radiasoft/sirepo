{
    "appModes": {
        "default": {
            "localRoute": "data"
        }
    },
    "constants": {
        "allowedEquationOps": [
            "abs", "cos", "cot", "csc", "exp", "log", "pi", "sec", "sin", "tan", "sqrt"
        ],
        "inProgressText": "Working"
    },
    "enum": {
        "AppMode": [
            ["analysis", "Data Analysis"],
            ["classification", "Classification"],
            ["regression", "Regression"]
        ],
        "Classifier": [
            ["decisionTree", "Decision Tree"],
            ["knn", "K Nearest Neighbors"],
            ["linearSvc", "Linear SVC"],
            ["logisticRegression", "Logistic Regression"]
        ],
        "ClusterMethod": [
            ["agglomerative", "Agglomerative Clustering"],
            ["dbscan", "DBSCAN"],
            ["gmix", "Gaussian Mixture"],
            ["kmeans", "KMeans"]
        ],
        "InputOutputClass": [
            ["input", "Input"],
            ["output", "Output"],
            ["none", "None"]
        ],
        "MLModule": [
            ["neuralnet", "Neural Network"]
        ],
        "NeuralNetActivation": [
            ["exponential", "Exponential (base e)"],
            ["elu", "Exponential Linear Unit (elu)"],
            ["hard_sigmoid", "Hard Sigmoid"],
            ["tanh", "Hyperbolic Tangent"],
            ["linear", "Linear (identity)"],
            ["relu", "Rectified Linear Unit (relu)"],
            ["selu", "Scaled Exponential Linear Unit (selu)"],
            ["sigmoid", "Sigmoid"],
            ["softmax", "Softmax"],
            ["softplus", "Softplus"],
            ["softsign", "Softsign"]
        ],
        "NeuralNetLayer": [
            ["Activation", "Activation Funciton"],
            ["AlphaDropout", "Alpha Noise Dropout"],
            ["Dense", "Densely Connected NN"],
            ["Dropout", "Dropout"],
            ["Flatten", "Flatten"],
            ["GaussianDropout", "Gaussian Noise Dropout"],
            ["GaussianNoise", "Gaussian Noise"]
        ],
        "NeuralNetLosses": [
            ["binary_crossentropy", "Binary Cross-Entropy"],
            ["categorical_crossentropy", "Categorical Crossentropy"],
            ["categorical_hinge", "Categorical Hinge"],
            ["cosine_proximity", "Cosine Proximity"],
            ["crossentropy", "Crossentropy"],
            ["hinge", "Hinge"],
            ["kullback_leibler_diverence", "Kullback Leibler Divergence"],
            ["logcosh", "log(cosh(x))"],
            ["mean_absolute_error", "Mean Absolute Error"],
            ["mean_absolute_percentage_error", "Mean Absolute Percentage Error"],
            ["mean_squared_error", "Mean Squared Error"],
            ["mean_squared_logarithmic_error", "Mean Squared Logarithmic Error"],
            ["poisson", "Poisson"],
            ["sparse_categorical_crossentropy", "Sparse Categorical Crossentropy"],
            ["squared_hinge", "Squared Hinge"]
        ],
        "NeuralNetOptimizer": [
            ["sgd", "Stochastic Gradient Descent"],
            ["rmsprop", "RMSProp"],
            ["adagrad", "Adagrad"],
            ["adadelta", "Adadelta"],
            ["adam", "Adam"],
            ["adamax", "Adamax"],
            ["nadam", "Nesterov Adam"]
        ],
        "PartitionSection": [
            ["train", "Training"],
            ["test", "Testing"],
            ["validate", "Valiation"],
            ["train_and_test", "Training and Testing"]
        ],
        "PlotAction": [
            ["cluster", "Cluster"],
            ["fft", "FFT"],
            ["fit", "Fit"],
            ["trim", "Trim"]
        ],
        "PlotScale": [
            ["linear", "Linear"],
            ["log10", "Base-10 Logarithm"]
        ],
        "Scaler": [
            ["MaxAbsScaler", "Max-Abs Scaler"],
            ["MinMaxScaler", "Min-Max Scaler"],
            ["RobustScaler", "Robust Scaler"],
            ["StandardScaler", "Standard Scaler"],
            ["None", "None"]
        ],
        "SplitMethod": [
            ["random", "Random"],
            ["selection", "Select Ranges"]
        ]
    },
    "dynamicFiles": {
        "sirepoLibs": {
            "js": [
                "ml.js"
            ],
            "css": [
                "ml.css"
            ]
        }
    },
    "localRoutes": {
        "data": {
            "route": "/data/:simulationId",
            "config": {
                "controller": "DataController as data",
                "templateUrl": "/static/html/ml-data.html"
            }
        },
        "analysis": {
            "route": "/analysis/:simulationId",
            "config": {
                "controller": "AnalysisController as analysis",
                "templateUrl": "/static/html/ml-analysis.html"
            }
        },
        "partition": {
            "route": "/partition/:simulationId",
            "config": {
                "controller": "PartitionController as partition",
                "templateUrl": "/static/html/ml-partition.html"
            }
        },
        "regression": {
            "route": "/regression/:simulationId",
            "config": {
              "controller": "RegressionController as regression",
                "templateUrl": "/static/html/ml-regression.html"
            }
        },
        "classification": {
            "route": "/classification/:simulationId",
            "config": {
              "controller": "ClassificationController as classification",
              "templateUrl": "/static/html/ml-classification.html"
            }
        }
    },
    "frameIdFields": {
        "animation": ["columnNumber", "appMode"],
        "dtClassifierClassificationMetricsAnimation": [],
        "dtClassifierConfusionMatrixAnimation": [],
        "epochAnimation": [],
        "knnClassificationMetricsAnimation": [],
        "knnConfusionMatrixAnimation": [],
        "knnErrorRateAnimation": [],
        "linearSvcConfusionMatrixAnimation": [],
        "linearSvcErrorRateAnimation": [],
        "logisticRegressionClassificationMetricsAnimation": [],
        "logisticRegressionConfusionMatrixAnimation": [],
        "logisticRegressionErrorRateAnimation": []
    },
    "model": {
        "analysisCluster": {
            "model": "analysisReport",
            "basic": [
                "action",
                "clusterMethod",
                "clusterCount",
                "clusterFields"
            ],
            "advanced": []
        },
        "analysisData": {
            "title": "Archive Data File",
            "basic": [
                "file"
            ],
            "advanced": []
        },
        "analysisFFT": {
            "model": "analysisReport",
            "basic": [
                "action"
            ],
            "advanced": []
        },
        "analysisFit": {
            "model": "analysisReport",
            "basic": [
                "action",
                "fitEquation",
                "fitVariable",
                "fitParameters"
            ],
            "advanced": []
        },
        "analysisNone": {
            "model": "analysisReport",
            "basic": [
                "action"
            ],
            "advanced": []
        },
        "analysisReport": {
            "x": ["X Value", "AnalysisParameter", "0"],
            "y1": ["Y1 Value", "AnalysisParameter", "1"],
            "action": ["", "PlotActionButtons"],
            "notes": ["Notes", "Text", ""],
            "clusterMethod": ["Method", "ClusterMethod", "kmeans"],
            "clusterCount": ["Number of Clusters", "Integer", 3, "", 2, 20],
            "clusterFields": ["Fields", "ClusterFields"],
            "clusterScaleMin": ["Scaled Min", "Float", -0.8],
            "clusterScaleMax": ["Scaled Min", "Float", 0.8],
            "clusterRandomSeed": ["Random Seed", "Integer", 12341234],
            "clusterKmeansInit": ["KMeans Number of Runs", "Integer", 2, "Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia.", 2, 20],
            "clusterDbscanEps": ["DBSCAN Max Sample Distance", "Float", 0.1, "The maximum distance between two samples for them to be considered as in the same neighborhood."],
            "fitEquation": ["Equation to Fit", "Equation", "a * x + b", "Functions limited to trig, exp, log, abs. Use 'pi' for Ï€. Variable and parameter names limited to 1 letter"],
            "fitParameters": ["Fit Parameters", "EquationParameters", "a,b"],
            "fitVariable": ["Independent Variable", "EquationVariables", "x"],
            "trimField": ["Trim Field", "AnalysisParameter"],
            "trimMin": ["Minimum", "Float"],
            "trimMax": ["Maximum", "Float"],
            "trimButton": ["", "TrimButton"],
            "y2": ["Y2 Value", "AnalysisOptionalParameter", "none"],
            "y3": ["Y3 Value", "AnalysisOptionalParameter", "none"],
            "notes": ["Notes", "Text", ""]
        },
        "analysisTrim": {
            "model": "analysisReport",
            "basic": [
                "action",
                "trimMin",
                "trimMax",
                "trimButton"
            ],
            "advanced": []
        },
        "columnInfo": {},
        "classificationAnimation": {
            "classifier": ["Classifier", "Classifier", "knn"]
        },
        "dataFile": {
            "appMode": ["Application Mode", "AppMode", "regression"],
            "file": ["Data File", "InputFile"],
            "inputsScaler": ["Inputs Scaler", "Scaler", "RobustScaler"],
            "outputsScaler": ["Outputs Scaler", "Scaler", "RobustScaler"]
        },
        "dtClassifierClassificationMetricsAnimation": {},
        "dtClassifierConfusionMatrixAnimation": {
            "colorMap": ["Color Map", "ColorMap", "blues"]
        },
        "epochAnimation": {
            "plotScale": ["Plot Scale", "PlotScale", "linear"]
        },
        "fftReport": {
            "column":  ["Column", "AnalysisParameter", "0"]
        },
        "fileColumnReport": {
            "x": ["VS", "XColumn", -1]
        },
        "fitAnimation": {
            "columnNumber": ["Column Number", "Integer", 0],
            "histogramBins": ["Histogram Bins", "Integer", 30],
            "colorMap": ["Color Map", "ColorMap", "viridis"]
        },
        "fitReport": {},
        "hiddenReport": {},
        "knnClassification": {
            "kmax": ["KMax", "Integer", 50],
            "kmin": ["KMin", "Integer", 1]
        },
        "knnClassificationMetricsAnimation": {},
        "knnConfusionMatrixAnimation": {
            "colorMap": ["Color Map", "ColorMap", "blues"]
        },
        "knnErrorRateAnimation": {},
        "linearSvcClassification": {
            "toleranceMax": ["Tolerance Max", "Float", 15e-2],
            "toleranceMin": ["Tolerance Min", "Float", 1e-3],
            "totalNumValues": ["Total number of values", "Integer", 20]
        },
        "linearSvcConfusionMatrixAnimation": {
            "colorMap": ["Color Map", "ColorMap", "blues"]
        },
        "linearSvcErrorRateAnimation": {},
        "logisticRegressionClassification": {
            "toleranceMax": ["Tolerance Max", "Float", 25],
            "toleranceMin": ["Tolerance Min", "Float", 1],
            "totalNumValues": ["Total number of values", "Integer", 20]
        },
        "logisticRegressionClassificationMetricsAnimation": {},
        "logisticRegressionConfusionMatrixAnimation": {
            "colorMap": ["Color Map", "ColorMap", "blues"]
        },
        "logisticRegressionErrorRateAnimation": {},
        "mlModel": {
            "mlModule": ["Model Type", "MLModule", "neuralnet"]
        },
        "neuralNet": {
            "optimizer": ["Optimizer", "NeuralNetOptimizer", "adam"],
            "losses": ["Losses", "NeuralNetLosses", "mean_squared_error"],
            "epochs" : ["Epochs", "Integer", 500],
            "batch_size": ["Batch Size", "Integer", 50],
            "shuffle": ["Shuffle Before Epoch", "Boolean", "1"]
        },
        "neuralNetLayer": {
            "layer": ["Layer", "NeuralNetLayer", "Dense"],
            "activationActivation": ["Activation", "NeuralNetActivation", "relu"],
            "alphaDropoutRate": ["Rate", "Float", 0.5],
            "denseActivation": ["Activation", "NeuralNetActivation", "relu"],
            "denseDimensionality": ["Dimensionality", "Integer", 10],
            "dropoutRate": ["Rate", "Float", 0.5],
            "gaussianDropoutRate": ["Rate", "Float", 0.5],
            "gaussianNoiseStddev": ["Standard Deviation", "Float", 0.01]
        },
        "partition": {
            "training": ["Training %", "Float", 75, "", 1, 98],
            "testing": ["Testing %", "Float", 12.5, "", 1, 98],
            "validation": ["Validation %", "Float", 12.5],
            "method": ["Split Method", "SplitMethod", "random"],
            "random_state": ["Random Seed", "Integer", 42],
            "section0": ["Section 0", "PartitionSection", "validate"],
            "section1": ["Section 1", "PartitionSection", "train_and_test"],
            "section2": ["Section 2", "PartitionSection", "validate"],
            "cutoff0": ["Cutoff 0", "Integer"],
            "cutoff1": ["Cutoff 1", "Integer"],
            "trainTestPercent": ["Training %", "Float", 75, "", 1, 98]
        },
        "partitionColumnReport": {},
        "partitionSelectionReport": {},
        "simulationStatus": {}
    },
    "strings": {
        "completionState": ": {frameCount} epochs",
        "simulationDataType": "dataset",
        "simulationDataTypePlural": "datasets",
        "typeOfSimulation": "training"
    },
    "view": {
        "analysisCluster": {
            "model": "analysisReport",
            "basic": [
                "action",
                "clusterMethod",
                "clusterCount",
                "clusterFields"
            ],
            "advanced": []
        },
        "analysisFFT": {
            "model": "analysisReport",
            "basic": [
                "action"
            ],
            "advanced": []
        },
        "analysisFit": {
            "model": "analysisReport",
            "basic": [
                "action",
                "fitEquation",
                "fitVariable",
                "fitParameters"
            ],
            "advanced": []
        },
        "analysisNone": {
            "model": "analysisReport",
            "basic": [
                "action"
            ],
            "advanced": []
        },
        "analysisReport": {
            "title": "Analysis Plot",
            "advanced": [
                ["Main", [
                    "x",
                    "y1",
                    "notes"
                ]],
                ["Cluster", [
                    "clusterScaleMin",
                    "clusterScaleMax",
                    "clusterRandomSeed",
                    "clusterKmeansInit",
                    "clusterDbscanEps"
                ]]
            ]
        },
        "analysisTrim": {
            "model": "analysisReport",
            "basic": [
                "action",
                "trimMin",
                "trimMax",
                "trimButton"
            ],
            "advanced": []
        },
        "columnChooser": {
            "title": "Columns",
            "basic": [],
            "advanced": []
        },
        "dataFile": {
            "title": "Data Source",
            "basic": [
                "appMode",
                "file",
                "inputsScaler",
                "outputsScaler"
            ],
            "advanced": []
        },
        "dtClassifierClassificationMetricsAnimation": {
            "title": "Decision Tree Classification Metrics",
            "advanced": []
        },
        "dtClassifierConfusionMatrixAnimation": {
            "title": "Decision Tree Confusion Matrix",
            "basic": [],
            "advanced": [
                "colorMap"
            ]
        },
        "epochAnimation": {
            "title": "Training Error",
            "advanced": [
                "plotScale"
            ]
        },
        "fftReport": {
            "title": "FFT",
            "basic": [],
            "advanced": [
                "column"
            ]
        },
        "fileColumnReport": {
            "title": "Column",
            "advanced": []
        },
        "fitAnimation": {
            "title": "Column",
            "advanced": []
        },
        "knnClassificationMetricsAnimation": {
            "title": "KNN Classification Metrics",
            "basic": [],
            "advanced": []
        },
        "knnConfusionMatrixAnimation": {
            "title": "KNN Confusion Matrix",
            "basic": [],
            "advanced": [
                "colorMap"
            ]
        },
        "knnErrorRateAnimation": {
            "title": "KNN Error Rate",
            "advanced": []
        },
        "linearSvcConfusionMatrixAnimation": {
            "title": "Linear SVC Confusion Matrix",
            "basic": [],
            "advanced": [
                "colorMap"
            ]
        },
        "linearSvcErrorRateAnimation": {
            "title": "Linear SVC Error Rate",
            "advanced": []
        },
        "logisticRegressionClassificationMetricsAnimation": {
            "title": "Logistic Regression Classification Metrics",
            "advanced": []
        },
        "logisticRegressionConfusionMatrixAnimation": {
            "title": "Logistic Regression Confusion Matrix",
            "basic": [],
            "advanced": [
                "colorMap"
            ]
        },
        "logisticRegressionErrorRateAnimation": {
            "title": "Logistic Regression Error Rate",
            "advanced": []
        },
        "mlModel": {
            "title": "Model",
            "basic": [
                "mlModule"
            ],
            "advanced": []
        },
        "neuralNet": {
            "title": "Neural Network",
            "basic": [
                "optimizer",
                "losses",
                "epochs",
                "batch_size",
                "shuffle"
            ],
            "advanced": []
        },
        "neuralNetLayer": {
            "title": "Neural Network Layers",
            "advanced": []
        },
        "partition": {
            "title": "Partition",
            "basic": [
                "method",
                "training",
                "testing",
                "validation"
            ],
            "advanced": [
                "random_state"
            ]
        },
        "partitionColumnReport": {
            "title": "Column",
            "advanced": []
        },
        "partitionSelectionReport": {
            "title": "Partition Selection",
            "advanced": []
        },
        "simulationSettings": {
            "title": "Training Settings",
            "basic": [
                "classificationAnimation.classifier",
                "knnClassification.kmin",
                "knnClassification.kmax",
                "linearSvcClassification.toleranceMax",
                "linearSvcClassification.toleranceMin",
                "linearSvcClassification.totalNumValues",
                "logisticRegressionClassification.toleranceMax",
                "logisticRegressionClassification.toleranceMin",
                "logisticRegressionClassification.totalNumValues"
            ],
            "advanced": []
        },
        "simulationStatus": {
            "title": "Execution Status",
            "advanced": []
        }
    }
}
