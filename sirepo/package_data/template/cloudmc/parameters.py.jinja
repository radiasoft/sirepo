# -*- python -*-
import numpy
import openmc
import openmc_data_downloader


def create_geometry():
    univ = openmc.DAGMCUniverse(
        filename='{{ dagmcFilename }}',
    )
    {% if reflectivePlanes_useReflectivePlanes == '1' %}
    # creates an edge of universe boundary surface
    vac_surf = openmc.Sphere(r=10000, surface_id=9999, boundary_type="vacuum")
    plane1 = openmc.Plane(
        a={{ reflectivePlanes_plane1a }},
        b={{ reflectivePlanes_plane1b }},
        c=0.0,
        d=0.0,
        surface_id=9991,
        boundary_type="reflective",
    )
    plane2 = openmc.Plane(
        a={{ reflectivePlanes_plane2a }},
        b={{ reflectivePlanes_plane2b }},
        c=0.0,
        d=0.0,
        surface_id=9990,
        boundary_type="reflective",
    )
    univ = openmc.Cell(
        cell_id=9999,
        region=-vac_surf & -plane1 & +plane2,
        fill=univ,
    )
    openmc.Geometry(root=[univ]).export_to_xml()
    {% else %}
    openmc.Geometry(root=univ).export_to_xml()
    {% endif %}


def create_materials():
    {% filter indent(width=4) %}
    {{ materials }}
    {% endfilter %}
    materials.export_to_xml()
    openmc_data_downloader.just_in_time_library_generator(
        libraries='{{ settings_materialLibrary }}',
        materials=materials,
        destination='../../lib',
    )


def create_settings():
    settings = openmc.Settings()
    settings.batches = {{ settings_batches }}
    settings.inactive = {{ settings_inactive }}
    settings.particles = {{ settings_particles }}
    settings.output = dict(
        summary=False,
        tallies=False,
    )
    settings.source = [
        {% filter indent(width=8) %}
        {{ sources }}
        {% endfilter %}
    ]
    settings.run_mode = "{{ settings_run_mode }}"
    settings.photon_transport = "{{ settings_photon_transport }}" == "1"
    settings.export_to_xml()


def create_tallies():
    {% filter indent(width=4) %}
    {{ tallies }}
    {% endfilter %}


create_geometry()
create_materials()
create_settings()
create_tallies()
openmc.run()
