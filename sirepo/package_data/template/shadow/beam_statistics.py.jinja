# -*- python -*-
from Shadow.ShadowPreprocessorsXraylib import prerefl, pre_mlayer, bragg
from pykern import pkjson
from pykern.pkcollections import PKDict
from sirepo.template import transfer_mat_bl
from srxraylib.sources import srfunc
import Shadow
import math
import numpy
import re

alpha = 0
energy = {{ photonEnergy }}
epsilon = {{beamStatisticsReport_epsilon}}
# specify m squared and sigma_x, sigma_z values to determine sigma_theta_x, sigma_theta_z values
# wavelength [cm]
ph_lambda = 1.2398419843320026 / energy * 1e-6 * 1e2

{% if zonePlateMethods %}
{{zonePlateMethods}}
{% endif %}

def create_sigma_matrix():
{% if simulation_sourceType == 'geometricSource' %}
    sigmax = {{ geometricSource_sigmax }}
    sigdix = {{ geometricSource_sigdix }}
    sigmaz = {{ geometricSource_sigmaz }}
    sigdiz = {{ geometricSource_sigdiz }}
{% elif simulation_sourceType == 'undulator' %}
{% filter indent(width=4) %}
{{undulatorSettings}}
{% endfilter %}
{% elif simulation_sourceType == 'bendingMagnet' %}
    source = Shadow.Source()
    beam = Shadow.Beam()
    source.NPOINT = {{simulation_npoint}}
    source.ISTAR1 = {{simulation_istar1}}
{% filter indent(width=4) %}
{{bendingMagnetSettings}}
beam.genSource(source)
{% endfilter %}
    rays = beam.rays
{% endif %}

{% if simulation_sourceType in ('bendingMagnet', 'undulator') %}
    def rays_sigma(rays, idx):
        return numpy.sqrt(numpy.mean(rays[:, idx] ** 2))

    sigmax = rays_sigma(rays, 0)
    sigdix = rays_sigma(rays, 3)
    sigmaz = rays_sigma(rays, 2)
    sigdiz = rays_sigma(rays, 5)
{% endif %}
    return numpy.matrix([
        [sigmax ** 2, 0, 0, 0],
        [0, sigdix ** 2, 0, 0],
        [0, 0, sigmaz ** 2, 0],
        [0, 0, 0, sigdiz ** 2],
    ])

def apply_aperture(oe, mat):
    Pmat = numpy.array([
        [1.0, 0.0, 0.0, 0.0],
        [0.0, 0.0, 1.0, 0.0],
        [0.0, 1.0, 0.0, 0.0],
        [0.0, 0.0, 0.0, 1.0]])
    res = transfer_mat_bl.gauss_apert_4x4(
        # Convert Sigma to x, y, xp, yp, via Pmat Sigma Pmat (since Pmat is symmetric)
        numpy.matmul(numpy.matmul(Pmat, mat), Pmat),
        # wavelength [cm]
        ph_lambda,
        # half aperture x, y [cm]
        oe.RX_SLIT[0] / 2 * {{ beamStatisticsReport_k_apert_x }},
        oe.RZ_SLIT[0] / 2 * {{ beamStatisticsReport_k_apert_y }},
    )
    return numpy.matmul(numpy.matmul(Pmat, res), Pmat)

def calculate_stats(pos, oe, beam):
    global alpha
    global sigma_mat
    include_apertures = {{ beamStatisticsReport_includeApertures }}

    if include_apertures and oe and oe.I_STOP[0] == 0 \
       and oe.RX_SLIT[0] != 0 and oe.RZ_SLIT[0] != 0:
        sigma_mat = apply_aperture(oe, sigma_mat)
        pos += (oe.T_SOURCE if oe else 0)
    else:
        Tmat, x_prop_cen, xp_prop_cen, z_prop_cen, zp_prop_cen = transfer_mat_bl.tmat_calc(beam.duplicate(), epsilon)
        sigma_mat = Tmat * sigma_mat * numpy.transpose(Tmat)
        pos += (oe.T_SOURCE if oe else 0)
        if oe:
            # oe.ALPHA is in radians after traceOE()
            alpha = int(alpha + 180 / math.pi * oe.ALPHA) % 360
        beam_stats.append(PKDict(
            isRotated=True if alpha == 90 or alpha == 270 else False,
            s=pos * 1e-2,
            x=x_prop_cen,
            xp=xp_prop_cen,
            z=z_prop_cen,
            zp=zp_prop_cen,
            matrix=Tmat.tolist(),
            sigma_mx=sigma_mat.tolist(),
            sigmax=math.sqrt(sigma_mat[0, 0]) * 1e-2,
            sigdix=math.sqrt(sigma_mat[1, 1]),
            sigmaz=math.sqrt(sigma_mat[2, 2]) * 1e-2,
            sigdiz=math.sqrt(sigma_mat[3, 3]),
            sigxdix=sigma_mat[0, 1] * 1e-2,
            sigzdiz=sigma_mat[2, 3] * 1e-2,
        ))
    return pos

def divide_drift(pos, beam, count, distance, divisions={{ beamStatisticsReport_driftDivisions }}):
    if distance < 1e-3:
        return
    for i in range(divisions - 1):
        beam0 = beam.duplicate();
        oe = Shadow.OE()
        oe.DUMMY = 1.0
        oe.set_empty(ALPHA=0)
        oe.FWRITE = 3
        oe.T_IMAGE = 0.0
        oe.T_SOURCE = distance / divisions
        beam0.traceOE(oe, count)
        count += 1
        pos = calculate_stats(pos, oe, beam0)
    return pos

def process_stats():
    def compute_angx(x, z, xz, scale=1):
        x = numpy.array(x)
        z = numpy.array(z)
        xz = numpy.array(xz)
        return ((1/2) * numpy.arctan(2 * scale * xz / (x ** 2 - z ** 2))).tolist()


    def compute_coherence_length(v1, emit):
        v = (4 * v1) / (numpy.array(emit) ** 2 / (ph_lambda / 4 / numpy.pi) ** 2 - 1)
        v[v < 0] = 0
        return numpy.sqrt(v).tolist()


    def compute_emittance(v1, v2, v3):
        return numpy.sqrt(
            v1 * numpy.array(v2) ** 2 - (numpy.array(v3) * 1e2) ** 2
        ).tolist()


    def compute_emittance_and_coherence_length(res):
        res00 = (numpy.array(res.sigmax) * 1e2) ** 2
        res22 = (numpy.array(res.sigmaz) * 1e2) ** 2
        res.emit_x = compute_emittance(res00, res.sigdix, res.sigxdix)
        res.emit_z = compute_emittance(res22, res.sigdiz, res.sigzdiz)
        res.xi_x = compute_coherence_length(res00, res.emit_x)
        res.xi_z = compute_coherence_length(res22, res.emit_z)


    def rotated_values(stats, field):
        if field == 'sigmaxz':
            return [-v.sigma_mx[0][2] if v.isRotated else v.sigma_mx[0][2] for v in stats]
        if field == 'sigmaxpzp':
            return [-v.sigma_mx[1][3] if v.isRotated else v.sigma_mx[1][3] for v in stats]
        if re.search('z', field):
            f = re.sub('z', 'x', field)
        else:
            f = re.sub('x', 'z', field)
        return [v[f] if v.isRotated else v[field] for v in stats]

    res = PKDict(
        s=[v.s for v in beam_stats],
    )
    for f in ('sigmax', 'sigdix', 'sigmaz', 'sigdiz', 'sigmaxz', 'sigmaxpzp', 'x', 'xp', 'z', 'zp', 'sigxdix', 'sigzdiz'):
        res[f] = rotated_values(beam_stats, f)
    res.angxz = compute_angx(res.sigmax, res.sigmaz, res.sigmaxz, scale=1e-4)
    res.angxpzp = compute_angx(res.sigdix, res.sigdiz, res.sigmaxpzp)
    compute_emittance_and_coherence_length(res)
    return res


def run_shadow_simulation():
    beam = transfer_mat_bl.create_mat_rays(epsilon, energy)
    pos = calculate_stats(0, None, beam)
{% filter indent(width=4) %}
{{- beamlineOptics}}
{% endfilter %}
    return process_stats()

beam_stats = []
sigma_mat = create_sigma_matrix()
stats = run_shadow_simulation()

pkjson.dump_pretty(stats, filename='{{beamStatsFile}}')
