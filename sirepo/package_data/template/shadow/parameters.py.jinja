# -*- python -*-
import math
import numpy
import Shadow
from Shadow.ShadowPreprocessorsXraylib import prerefl, pre_mlayer, bragg
from srxraylib.sources import srfunc

{% if zonePlateMethods %}
{{zonePlateMethods}}
{% endif %}

{% if simulation_sourceType == 'undulator' -%}
{{undulatorSettings}}
{% else %}
source = Shadow.Source()
beam = Shadow.Beam()

source.NPOINT = {{simulation_npoint}}
source.ISTAR1 = {{simulation_istar1}}

{% if simulation_sourceType == 'bendingMagnet' %}
{{bendingMagnetSettings}}
{% endif -%}

{% if simulation_sourceType == 'geometricSource' %}
{{geometricSourceSettings}}
{% endif -%}

{% if simulation_sourceType == 'wiggler' -%}
(traj, pars) = srfunc.wiggler_trajectory(
    b_from={{wiggler_b_from}},
    inData='{{wigglerTrajectoryInput}}',
    nPer={{wiggler_nPer}},
    nTrajPoints=501,
    ener_gev={{electronBeam_bener}},
    per={{wiggler_per}},
    kValue={{wiggler_kValue}},
    trajFile='tmp.traj',
    shift_x_flag={{wiggler_shift_x_flag}},
    shift_x_value={{wiggler_shift_x_value}},
    shift_betax_flag={{wiggler_shift_betax_flag}},
    shift_betax_value={{wiggler_shift_betax_value}},
)
srfunc.wiggler_cdf(
    traj,
    enerMin={{wiggler_ph1}},
    enerMax={{wiggler_ph2}},
    enerPoints=1001,
    outFile='{{wigglerTrajectoryFilename}}',
    elliptical=False)
{{wigglerSettings}}
{% endif -%}

source.F_BOUND_SOUR = {{rayFilter_f_bound_sour}}
{% if rayFilter_f_bound_sour == '2' %}
fn = b'source-aperture.dat'
with open(fn, 'w') as f:
  f.write(' {{rayFilter_distance}} {{rayFilter_x1}} {{rayFilter_x2}} {{rayFilter_z1}} {{rayFilter_z2}}')
source.FILE_BOUND = fn
source.NTOTALPOINT = 10000000
{% endif -%}

beam.genSource(source)

{% endif -%}

{% if distanceFromSource and distanceFromSource != 0 %}
beam.retrace({{distanceFromSource}})
{% endif -%}

{%- if beamlineOptics %}
{{beamlineOptics}}
{% endif -%}

beam.write('{{shadowOutputFile}}')
