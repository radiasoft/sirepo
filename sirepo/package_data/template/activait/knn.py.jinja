
from pykern import pkjson
from pykern.pkcollections import PKDict
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.neighbors import KNeighborsClassifier

knn_error = []

# calculate error for K values between kmin and kmax
for i in range({{ knnClassification_kmin }}, {{ knnClassification_kmax }}):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(train[:, in_idx], np.ravel(train[:, out_idx]))
    knn_error.append(
        [i, np.mean(knn.predict(test[:, in_idx]) != test[:, out_idx])]
    )

k_best = {{ knnClassification_kmin }} + np.argmin(np.array(knn_error)[:,1])

# repeat KNN prediction with best K value
knn_best = KNeighborsClassifier(n_neighbors=k_best)
knn_best.fit(train[:, in_idx], np.ravel(train[:, out_idx]))
y_pred_knn = knn_best.predict(test[:, in_idx])
pkjson.dump_pretty(
    classification_report(test[:, out_idx], y_pred_knn, output_dict=True),
    filename='{{ knnClassificationFile }}',
)
np.save('{{ knnErrorFile }}', knn_error)
l = np.unique(y_pred_knn).tolist()
pkjson.dump_pretty(
    PKDict(
    k=k_best,
    labels=l,
    matrix=confusion_matrix(test[:, out_idx], y_pred_knn, labels=l).tolist(),
    ),
    filename='{{ knnConfusionFile }}',
)
