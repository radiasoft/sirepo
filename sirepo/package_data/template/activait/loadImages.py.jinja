import h5py
import numpy
from sklearn.model_selection import train_test_split
from pykern.pkcollections import PKDict
from sirepo.template.activait import SirepoHDF5Sequence


def _split_indices(indices_all):
    test_and_validate = (100 - {{partition_training}}) / 100
    validation_size = ((test_and_validate * 100) - {{partition_testing}}) / 100
    train_indices, tvx, _, tvy = train_test_split(
        indices_all, indices_all, test_size=test_and_validate, random_state=42, shuffle=True
    )
    test_indices, val_indices, _, _ = train_test_split(
        tvx, tvy, test_size=validation_size/test_and_validate, random_state=42, shuffle=True
    )
    return PKDict(
        train=train_indices,
        val=val_indices,
        test=test_indices,
    )


def image_train_val_test_split(
    **kwargs
):
    with h5py.File(kwargs.get("src"), "r", libver="latest", swmr=True) as file:
        indices_all = numpy.arange(file[kwargs.get("X_key")].shape[0])
    s = _split_indices(indices_all)
    r = PKDict()
    for k in s:
        r[k+"_gen"] = SirepoHDF5Sequence(
            filename=kwargs.get('src'),
            x=PKDict(
                domain=[0, 255],
                key=kwargs.get('X_key'),
            ),
            y=PKDict(
                domain=None,
                key=kwargs.get('y_key'),
            ),
            indices=s[k],
            batch_size=kwargs.get('batch_size'),
        )
    return r


output_shape = {{ outputShape }}
split = image_train_val_test_split(
    src='{{ dataFile }}',
    X_key='images',
    y_key='metadata/image_types',
    shuffle={{ shuffleEachEpoch }},
    num_classes=output_shape,
    batch_size={{ neuralNet_batch_size }},
)
with h5py.File('{{ dataFile }}', "r", libver="latest", swmr=True) as file:
    testy = file[split.test_gen.y.key][sorted(split.test_gen.indices)]
    input_shape = file["{{ inPath }}"].shape[1:]
    if len(input_shape) < 3:
        input_shape += (1,)
testx = split.test_gen
