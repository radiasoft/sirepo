import h5py
import numpy
from sklearn.model_selection import train_test_split
from pykern.pkcollections import PKDict
from sirepo.template.activait import SirepoHDF5ImageGenerator


def _split_indices(indices_all):
    test_and_validate = (100 - {{partition_training}}) / 100
    validation_size = ((test_and_validate * 100) - {{partition_testing}}) / 100
    train_indices, tvx, _, tvy = train_test_split(
        indices_all, indices_all, test_size=test_and_validate, random_state=42, shuffle=False
    )
    test_indices, val_indices, _, _ = train_test_split(
        tvx, tvy, test_size=validation_size/test_and_validate, random_state=42, shuffle=False
    )
    return PKDict(
        train_indices=train_indices,
        validation_indices=val_indices,
        test_indices=test_indices,
    )


def image_train_val_test_split(
    **kwargs
):
    with h5py.File(kwargs.get("src"), "r", libver="latest", swmr=True) as file:
        indices_all = numpy.arange(file[kwargs.get("X_key")].shape[0])
    s = _split_indices(indices_all)
    return PKDict(
        train_generator=SirepoHDF5ImageGenerator(
            indices=s.train_indices,
            **kwargs,
        ),
        val_generator=SirepoHDF5ImageGenerator(
            indices=s.validation_indices,
            **kwargs,
        ),
        test_generator=SirepoHDF5ImageGenerator(
            mode="test",
            indices=s.test_indices,
            **kwargs,
        )
    )


output_shape = {{ outputShape }}
split = image_train_val_test_split(
    src='{{ dataFile }}',
    X_key='images',
    y_key='metadata/image_types',
    labels_encoding=False,
    scaler=False,
    shuffle={{ shuffleEachEpoch }},
    num_classes=output_shape,
    batch_size={{ neuralNet_batch_size }},
)
with h5py.File('{{ dataFile }}', "r", libver="latest", swmr=True) as file:
    testy = file[split.test_generator.y_key][split.test_generator._indices]
    input_shape = file["{{ inPath }}"].shape[1:]
    if len(input_shape) < 3:
        input_shape += (1,)
testx = split.test_generator
