{% if image_data %}

import keras.losses
import matplotlib.pyplot as plt
from keras.callbacks import CSVLogger

model.compile(
    optimizer='adam',
    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['accuracy'],
)

history = model.fit(
    x=trainx, y=trainy, epochs={{ neuralNet_epochs }},
    validation_data=(valx, valy),
    callbacks=[CSVLogger('{{ fitCSVFile }}')],
)

np.save('{{ testFile }}', testy)
np.save('{{ predictFile }}', model.predict(x=testx))

{% else %}
from keras.callbacks import CSVLogger
import matplotlib.pyplot as plt

model.compile(loss='{{ neuralNet_losses }}', optimizer='{{ neuralNet_optimizer }}')
history = model.fit(
    x=train[:, in_idx],
    y=train[:, out_idx],
    validation_data=(validate[:, in_idx], validate[:, out_idx]),
    batch_size={{ neuralNet_batch_size }},
    shuffle={% if neuralNet_shuffle == '1' %}True{% else %}False{% endif %},
    epochs={{ neuralNet_epochs }},
    verbose=False,
    callbacks=[CSVLogger('{{ fitCSVFile }}')],
)
np.save('{{ testFile }}', test[:, out_idx])
np.save('{{ predictFile }}', model.predict(x=test[:, in_idx]))
plt.figure(figsize=[6,4])
plt.plot(history.history['loss'], 'black', linewidth=2.0)
plt.plot(history.history['val_loss'], 'green', linewidth=2.0)
plt.legend(['Training Loss', 'Validation Loss'], fontsize=14)
plt.xlabel('Epochs', fontsize=10)
plt.ylabel('Loss', fontsize=10)
plt.title('Loss Curves', fontsize=12)
plt.savefig('loss_plot')

{% endif %}