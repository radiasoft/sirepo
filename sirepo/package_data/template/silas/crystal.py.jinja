from numpy import array, meshgrid, unique
from pykern.pkcollections import PKDict
from rslaser.optics import Crystal
from rslaser.thermal import ThermoOptic
from sirepo.template import template_common
import dolfin
import numpy

crystal = Crystal(params=PKDict({{crystalParams}}))
sim_type = "{{ thermalCrystal.calc_type }}"

def thermo_optic_sim():
    def _solve():
        if sim_type == "analytical":
            return thermo.{{ pump_pulse_profile }}_solution()

        elif sim_type == "fenics":
            thermo.set_boundary(2*(crystal.radius*100.)**2./40.)
            thermo.set_load('{{ pump_pulse_profile }}')
            r = crystal.params.pop_inversion_pump_rep_rate
            if r <= 1:
                return thermo.slow_solution('{{ pump_pulse_profile }}')
            elif r >= 100:
                return thermo.solve_steady()
            else:
                raise AssertionError(f"Invalid rep rate for simulated solve heat_load={'{{ pump_pulse_profile }}'}")

    thermo = ThermoOptic(crystal, {{ thermalCrystal.mesh_density }})

    # prep for 2d solve
    thermo.set_points((
        {{thermalTransportSettings_grid_points_r}},
        {{thermalTransportSettings_grid_points_w}},
        {{thermalTransportSettings_grid_points_z}},
    ))
    res_2d = _solve()

    ptzs = thermo.eval_pts[:, 2]
    ptrs = (thermo.eval_pts[:, 0] ** 2 + thermo.eval_pts[:, 1] ** 2) ** 0.5
    zs = unique(ptzs)
    rs = unique(ptrs)
    rcenter = rs.min()
    zface = zs.min() if crystal.params.pop_inversion_pump_type != "right" else zs.max()

    # Radial values reflected across axis & meshgrid with longitudinal values
    temp_profile = PKDict(
        radial=[rs, res_2d[ptzs==zface]],
        longitudinal=[zs, res_2d[ptrs==rcenter]]
    )
    pTs = res_2d.reshape((len(rs), len(zs)), order='F')
    pTs = array((pTs[::-1]).tolist()+pTs[1:].tolist())

    # prep for 3d solve
    mesh = thermo.mesh
    inds = []
    for item in dolfin.cpp.mesh.facets(mesh):
        inds.append(item.entities(0).tolist())
    vertices = mesh.coordinates()
    thermo.eval_pts = vertices
    res_3d = _solve()
    return PKDict(
        thermo=thermo,
        heat_map=pTs,
        temp_profile=temp_profile,
        intensity=res_3d,
        vertices=vertices,
        indices=numpy.array(inds),
    )


res = thermo_optic_sim()


# we will provide these indices to plotly so it can draw proper surfaces
numpy.save("indices.npy", res.indices)
numpy.save("intensity.npy", res.intensity)
numpy.save("vertices.npy", res.vertices)
template_common.write_dict_to_h5(
    res.temp_profile,
    "tempProfile.h5"
)
template_common.write_dict_to_h5(
    PKDict(
        intensity=res.heat_map,
        ranges=PKDict(
            x=[
                -crystal.params.length / 2,
                crystal.params.length / 2,
            ],
            y=[
                -crystal.params.pop_inversion_mesh_extent,
                crystal.params.pop_inversion_mesh_extent,
            ],
        ),
    ),
    "tempHeatMap.h5",
)
