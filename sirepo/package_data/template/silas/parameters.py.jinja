from collections.abc import Iterable
from pykern.pkcollections import PKDict
from rslaser.cavity import laser_cavity
from scipy import ndimage
import array
import h5py
import math
import numpy
import scipy.constants
import srwlib


def intensity_to_hdf5(count, pos, vals):
    (wfr, ar2d, sx, sy, xavg, yavg) = vals
    with open('{{ summaryCSV }}', 'a' if pos else 'w') as f:
        if pos == 0:
            f.write('count,pos,sx,sy,xavg,yavg\n')
        f.write(f'{count},{pos},{sx},{sy},{xavg},{yavg}\n')
    if count % 2 == 0:
        return
    count = int((count + 1) / 2)
    with h5py.File(f'wfr{count:05d}.h5', 'w') as f:
        # resize output data to 500x500 max
        max_size = 500
        x_resize = 1
        y_resize = 1
        if len(ar2d[0]) > max_size:
            x_resize = max_size / len(ar2d[0])
        if len(ar2d) > max_size:
            y_resize = max_size / len(ar2d)
        if y_resize != 1 or x_resize != 1:
            ar2d = ndimage.zoom(ar2d, [y_resize, x_resize], order=1)
        dset = f.create_dataset('wfr', data=ar2d)
        dset.attrs['eStart'] = wfr.mesh.eStart
        for dim in ('x', 'y'):
            for field in (f'n{dim}', f'{dim}Start', f'{dim}Fin'):
                dset.attrs[field] = getattr(wfr.mesh, field)
        dset.attrs['sx'] = sx
        dset.attrs['sy'] = sy
        dset.attrs['xavg'] = xavg
        dset.attrs['yavg'] = yavg
        dset.attrs['pos'] = pos


def save_laser_pulse(filename, cav):
    svals = cav.laser_pulse.pulsePos()
    (lpsxvals,lpsyvals) = cav.laser_pulse.rmsvals()
    ivals = cav.laser_pulse.intensity_vals()
    evals = cav.laser_pulse.energyvals()
    numpy.save(filename, numpy.array([
        svals,
        lpsxvals,
        lpsyvals,
        ivals,
        evals,
    ]))

#---

#Specify parameters for simulation
L_cav = {{ simulationSettings_cavity_length }} #Length of cavity [m]
dfL = {{ leftMirrorFocusingError }}
dfR = {{ rightMirrorFocusingError }}

#Crystal parameters
L_cryst = {{ crystal_width }} * 1e-2
n0 = {{ crystal_refractionIndex }}
n2 = {{ crystal_radius }}

wavefrontEnergy = {{ gaussianBeam_photonEnergy }} #Wavefront Energy [eV]. 1.55 eV is 800 nm wavelength
lam = scipy.constants.c * scipy.constants.value('Planck constant in eV/Hz')/wavefrontEnergy # convert energy [eV] to wavelength [m]

L_eff = L_cav+(1/n0 - 1)*L_cryst #Define effective length as path length reduced by index of refraction n0
print("L_eff=",L_eff)
beta0 = math.sqrt(L_eff*(L_cav/4+dfL)-L_eff**2/4)
print("beta0=",beta0)
sigx0 = math.sqrt(lam*beta0/4/math.pi)
print("sigx0=",sigx0)

propLen = {{ gaussianBeam_initialPropagationLength }} #Propagation of initial Gaussian [m]. It will then be back-propagated by propLen: a trick to get the Gaussian mode at the waist
pulseE = {{ gaussianBeam_energyPerPulse }} #Total energy of pulse [eV]
poltype = {{ gaussianBeam_polarization }} #Polarization of mode (0=linear horizontal, 1=linear vertical, 2=linear 45 deg, 3=linear 135 deg, 4=circular right, 5=circular left, 6=total)
sampFact = {{ simulationSettings_sample_factor }} #Determines grid size of initial wavefront

nslice = {{ simulationSettings_nslice }}
sig_s = {{ simulationSettings_sig_s }} # rms length of Gaussian laser pulse [m]
if nslice % 2 == 0:
    nslice += 1

cavity_inputs = PKDict(
    drift_right_length=L_cav / 2 - L_cryst / 2,
    drift_left_length=L_cav / 2 - L_cryst / 2,
    lens_left_focal_length=L_cav / 4 + dfR,
    lens_right_focal_length=L_cav / 4 + dfL,
    n0=n0,
    n2=n2,
    L_half_cryst=L_cryst / 2,
    pulse_params=PKDict(
        phE=wavefrontEnergy,
        nslice=nslice,
        tau_fwhm=0.1 / scipy.constants.c / math.sqrt(2.),
        slice_params=PKDict(
            propLen=propLen,
            pulseE=pulseE,
            poltype=poltype,
            sampFact=sampFact,
        )
    )
)

lc = laser_cavity.LaserCavity(cavity_inputs)

save_laser_pulse('{{ initialLaserFile }}', lc)

#---

prev_position = -1
count = 0
def intensity_callback(position, vals):
    global count, prev_position
    # only record intensity if position has changed
    if position - prev_position > 0:
        count += 1
        intensity_to_hdf5(count, position, vals)
    prev_position = position

lc.propagate(num_cycles={{ simulationSettings_n_reflections }}, callback=intensity_callback)

save_laser_pulse('{{ finalLaserFile }}', lc)
