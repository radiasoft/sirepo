# ^^ pulse, slice defined in laserPulse.py ^^ #

def _intensity(wavefront):
    return srwl_uti_data.calc_int_from_elec(w).tolist()


def _phase(wavefront):
    z, m = srwl_uti_data.calc_int_from_wfr(
        wavefront,
        _int_type=4,
        _pr=False,
    )
    {% if laserPulse.geometryFromFiles == "1" %}
    nx, ny = m.nx, m.ny
    {% else %}
    nx, ny = slice.nx_slice, slice.ny_slice
    {% endif %}
    return numpy.array(z).reshape(ny, nx).tolist()


def _ranges(wavefront):
    m = wavefront.mesh
    return {
        "x": [m.xStart, m.xFin],
        "y": [m.yStart, m.yFin],
    }


w = pulse.slice_wfr(0)
h5_data = PKDict()
{% if report in ("initialIntensityReport","initialPhaseReport")  %}
for x in {{ dataPaths }}:
    h5_data[x] = globals()[f"_{x}"](w)
template_common.write_dict_to_h5(h5_data, "{{ resultsFile }}")
{% else %}

def _build_crystal(model):
    from rslaser.optics import crystal
    return crystal.Crystal(
        params=PKDict(
            l_scale=1,
            length=model.width,
            n0=[model.refractionIndex] * model.numSlices,
            n2=[model.radialVariation] * model.numSlices,
            nslice=model.numSlices,
        )
    )


def _build_drift(length):
    from rslaser.optics import drift
    return drift.Drift(length)


def _build_lens(model):
    from rslaser.optics import lens
    return lens.Lens(model.focalLength)


def _build_watch(model):
    return _build_drift(0.0)


def propagate(pulse):
    beamline = {{ beamline }}
    prev = PKDict(position=0.0)
    for element in [PKDict(e) for e in beamline]:
        dz = element.position - prev.position
        t = element.type
        if dz:
            e = _build_drift(dz)
            pulse = e.propagate(pulse, "default")
        e = globals()[f"_build_{t}"](element)
        pulse = e.propagate(pulse, element.propagationType)
        if t == "watch":
            w = pulse.slice_wfr(0)
            for x in {{ dataPaths }}:
                h5_data[x] = globals()[f"_{x}"](w)
            template_common.write_dict_to_h5(h5_data, "{{ resultsFile }}")
        prev = element


propagate(pulse)
{% endif %}
