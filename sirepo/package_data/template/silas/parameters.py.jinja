# ^^ pulse, slice defined in laserPulse.py ^^ #

def _intensity(wavefront):
    return srwl_uti_data.calc_int_from_elec(w).tolist()


def _phase(wavefront):
    z, m = srwl_uti_data.calc_int_from_wfr(
        wavefront,
        _pol={{ laserPulse.polarization | int }},
        _int_type=4,
        _pr=False,
    )
    {% if laserPulse.geometryFromFiles == "1" %}
    nx, ny = m.nx, m.ny
    {% else %}
    nx, ny = slice.nx_slice, slice.ny_slice
    {% endif %}
    return numpy.array(z).reshape(ny, nx).tolist()


def _write_h5(file_path, h5_path, data):
    with h5py.File(file_path, "a") as f:
        f.create_dataset(h5_path, data=_intensity(w))


w = pulse.slice_wfr(0)
sim_data = sirepo.sim_data.get_class("silas")
{% if report == "initialIntensityReport" %}
_write_h5(sim_data.h5_data_file(), "intensity", _intensity(w))
{% elif report == "initialPhaseReport" %}
_write_h5(sim_data.h5_data_file(), "phase", _phase(w))
{% elif report == "animation" %}

def _build_crystal(model):
    from rslaser.optics import crystal
    return crystal.Crystal(
        params=PKDict(
            l_scale=1,
            length=model.width,
            n0=[model.refractionIndex] * model.numSlices,
            n2=[model.radius] * model.numSlices,
            nslice=model.numSlices,
        )
    )


def _build_drift(length):
    from rslaser.optics import drift
    return drift.Drift(length)


def _build_lens(model):
    from rslaser.optics import lens
    return lens.Lens(model.focalLength)


def _build_watch(model):
    return _build_drift(0.0)


def propagate(pulse):
    sim_data = sirepo.sim_data.get_class("silas")
    beamline = {{ beamline }}
    prev = PKDict(position=0.0)
    for element in [PKDict(e) for e in beamline]:
        dz = element.position - prev.position
        t = element.type
        if dz:
            e = _build_drift(dz)
            pulse = e.propagate(pulse, "default")
        e = globals()[f"_build_{t}"](element)
        pulse = e.propagate(pulse, element.propagationType)
        if t == "watch":
            w = pulse.slice_wfr(0)
            for x in ("intensity", "phase"):
                _write_h5(sim_data.h5_data_file(element), x, globals()[f"_{x}"](w))
        prev = element


propagate(pulse)
{% endif %}

