from pykern.pkcollections import PKDict
from rslaser.optics.crystal import Crystal
from rslaser.optics.drift import Drift
from rslaser.optics.lens import Lens
from rslaser.pulse.pulse import LaserPulse
from rslaser.utils import srwl_uti_data
from sirepo.template import template_common
import numpy
import scipy.interpolate


class Mirror:
    def propagate(self, laser_pulse):
        laser_pulse.ideal_mirror_180()
        return laser_pulse


def interpolate_across_slice(length, nslice, values):
    return scipy.interpolate.splev(
        (length / nslice) * (numpy.arange(nslice) + 0.5),
        scipy.interpolate.splrep(
            numpy.linspace(0, length, len(values)),
            values),
    ).tolist()


def propagate(pulse, elements, beamline):
    for idx in beamline:
        e = elements[idx]
        pulse = e[0].propagate(pulse, *e[1])
    return pulse


def save_wavefront(pulse):
    def intensity(wavefront):
        return srwl_uti_data.calc_int_from_elec(wavefront).tolist()


    def phase(wavefront):
        z, m = srwl_uti_data.calc_int_from_wfr(
            wavefront,
            _int_type=4,
            _pr=False,
        )
        return numpy.array(z).reshape(wavefront.mesh.ny, wavefront.mesh.nx).tolist()


    def ranges(wavefront):
        m = wavefront.mesh
        return {
            "x": [m.xStart, m.xFin],
            "y": [m.yStart, m.yFin],
        }

    h5_data = PKDict()
    for x in {{ dataPaths }}:
        h5_data[x] = locals()[x](pulse.slice_wfr({{ sliceNumber }}))
    template_common.write_dict_to_h5(h5_data, "{{ resultsFile }}")


pulse = LaserPulse(
    params=PKDict(
        {% for f in (
            'chirp',
            'nslice',
            'num_sig_long',
            'num_sig_trans',
            'nx_slice',
            'ny_slice',
            'photon_e_ev',
            'poltype',
            'pulseE',
            'sigx_waist',
            'sigy_waist',
            'tau_fwhm'
        ) %}
        {{ f }}={{ laserPulse[f] }},
        {% endfor %}
    ),
    {% if laserPulse.distribution == "file" %}
    files=PKDict(
        ccd="{{ ccdFile }}",
        meta="{{ metaFile }}",
        wfs="{{ wfsFile }}",
    ),
    {% endif %}
)

{% if report in ("initialIntensityReport","initialPhaseReport")  %}
save_wavefront(pulse)
{% else %}

elements = [
    {% filter indent(width=4) %}
    {{ beamlineElements }}
    {%- endfilter -%}
]

beamline = [{{ beamlineIndices }}]

save_wavefront(propagate(pulse, elements, beamline))
{% endif %}
