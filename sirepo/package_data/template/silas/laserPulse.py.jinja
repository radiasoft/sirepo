from pykern import pkinspect
from pykern.pkcollections import PKDict
from pykern.pkdebug import pkdp, pkdc, pkdlog
from rslaser.utils import srwl_uti_data
import numpy
import sirepo

def _build_pulse():
    from rslaser.pulse import pulse
    return pulse.LaserPulse(
        params=PKDict(
            chirp={{ laserPulse.chirp }},
            dist_waist={{ laserPulse.distFromWaist }},
            mx={{ laserPulse.modeOrder[0] }},
            my={{ laserPulse.modeOrder[1] }},
            nslice={{ laserPulse.numSlices }},
            num_sig_long={{ laserPulse.numSigmas[0] }},
            num_sig_trans={{ laserPulse.numSigmas[1] }},
            nx_slice={{ laserPulse.numSliceMeshPoints[0] }},
            ny_slice={{ laserPulse.numSliceMeshPoints[1] }},
            pad_factor={{ laserPulse.padFactor }},
            photon_e_ev={{ laserPulse.photonEnergy }},
            poltype={{ laserPulse.polarization | int }},
            pulseE={{ laserPulse.totalEnergy }},
            sigx_waist={{ laserPulse.waistSize[0] }},
            sigy_waist={{ laserPulse.waistSize[1] }},
            tau_fwhm={{ laserPulse.tauFWHM }},
        ),
        {% if laserPulse.geometryFromFiles == "1" %}
        files=PKDict(
            ccd=_lib_file("ccd", "{{ laserPulse.ccd }}"),
            meta=_lib_file("meta", "{{ laserPulse.meta }}"),
            wfs=_lib_file("wfs", "{{ laserPulse.wfs }}"),
        ),
        {% endif %}
    )


def _lib_file(field, basename):
    sim_data = sirepo.sim_data.get_class("silas")
    return sim_data.lib_file_name_with_model_field("laserPulse", field, basename)


def _save_pulse(pulse, filename):
    (lpsxvals, lpsyvals) = pulse.rmsvals()
    numpy.save(filename, numpy.array([
        pulse.pulsePos(),
        lpsxvals,
        lpsyvals,
        pulse.intensity_vals(),
        pulse.energyvals(),
    ]))


pulse = _build_pulse()
slice = pulse.slice[0]

