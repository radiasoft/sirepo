{%- macro rsOptFuctionSignature(addQuotes) -%}
{%- for e in rsOptElements -%}
{%- for p in rsOptParams -%}
{%- if p in e -%}
{%- for x in e[p].initial -%}
{%- if e[p].offsets[loop.index0] != 0 -%}
    {% if addQuotes %}'{% endif %}{{ fixSpaces(e.title) }}_{{ e[p].fieldNames[loop.index0] }}{% if addQuotes %}'{% endif %},
{%- endif -%}
{%- endfor -%}
{%- endif -%}
{%- endfor -%}
{%- endfor -%}
{%- endmacro -%}

{%- macro fixSpaces(t) -%}
{{ t | replace(" ", "_") }}
{%- endmacro -%}

import os
try:
    __IPYTHON__
    import sys
    del sys.argv[1:]
except:
    pass

{% if in_server %}
import sirepo.template
{% endif %}
import srwpy.srwl_bl
import srwpy.srwlib
import srwpy.srwlpy
{% if beamlineOpticsParameters %}
import math
import srwpy.srwl_uti_smp
{% endif %}

{% if beamlineOptics %}
def set_optics(v, names=None, want_final_propagation=True):
{{beamlineOptics}}
{% endif %}

{% if forRSOpt %}
from pykern.pkdebug import pkdlog
import numpy
{% endif %}

varParam = [
    ['name', 's', '{{simulation_name}}', 'simulation name'],

#---Data Folder
    ['fdir', 's', '{{fdir}}', 'folder (directory) name for reading-in input and saving output data files'],

{% if rs_type != 'g' %}
#---Electron Beam
    ['ebm_nm', 's', '', 'standard electron beam name'],
    ['ebm_nms', 's', '', 'standard electron beam name suffix: e.g. can be Day1, Final'],
    ['ebm_i', 'f', {{electronBeam_current}}, 'electron beam current [A]'],
    ['ebm_e', 'f', {{electronBeam_energy}}, 'electron beam avarage energy [GeV]'],
    ['ebm_de', 'f', {{electronBeam_energyDeviation}}, 'electron beam average energy deviation [GeV]'],
    ['ebm_x', 'f', {{electronBeamPosition_horizontalPosition}}, 'electron beam initial average horizontal position [m]'],
    ['ebm_y', 'f', {{electronBeamPosition_verticalPosition}}, 'electron beam initial average vertical position [m]'],
    ['ebm_xp', 'f', {{electronBeamPosition_horizontalAngle}}, 'electron beam initial average horizontal angle [rad]'],
    ['ebm_yp', 'f', {{electronBeamPosition_verticalAngle}}, 'electron beam initial average vertical angle [rad]'],
    ['ebm_z', 'f', 0., 'electron beam initial average longitudinal position [m]'],
    ['ebm_dr', 'f', {{electronBeamPosition_drift}}, 'electron beam longitudinal drift [m] to be performed before a required calculation'],
    ['ebm_ens', 'f', {{electronBeam_rmsSpread}}, 'electron beam relative energy spread'],
    ['ebm_emx', 'f', {{electronBeam_horizontalEmittance}}, 'electron beam horizontal emittance [m]'],
    ['ebm_emy', 'f', {{electronBeam_verticalEmittance}}, 'electron beam vertical emittance [m]'],
    {% if electronBeam_beamDefinition == 't' %}
    # Definition of the beam through Twiss:
    ['ebm_betax', 'f', {{electronBeam_horizontalBeta}}, 'horizontal beta-function [m]'],
    ['ebm_betay', 'f', {{electronBeam_verticalBeta}}, 'vertical beta-function [m]'],
    ['ebm_alphax', 'f', {{electronBeam_horizontalAlpha}}, 'horizontal alpha-function [rad]'],
    ['ebm_alphay', 'f', {{electronBeam_verticalAlpha}}, 'vertical alpha-function [rad]'],
    ['ebm_etax', 'f', {{electronBeam_horizontalDispersion}}, 'horizontal dispersion function [m]'],
    ['ebm_etay', 'f', {{electronBeam_verticalDispersion}}, 'vertical dispersion function [m]'],
    ['ebm_etaxp', 'f', {{electronBeam_horizontalDispersionDerivative}}, 'horizontal dispersion function derivative [rad]'],
    ['ebm_etayp', 'f', {{electronBeam_verticalDispersionDerivative}}, 'vertical dispersion function derivative [rad]'],
    {% else %}
    # Definition of the beam through Moments:
    ['ebm_sigx', 'f', {{electronBeam_rmsSizeX}}, 'horizontal RMS size of electron beam [m]'],
    ['ebm_sigy', 'f', {{electronBeam_rmsSizeY}}, 'vertical RMS size of electron beam [m]'],
    ['ebm_sigxp', 'f', {{electronBeam_rmsDivergX}}, 'horizontal RMS angular divergence of electron beam [rad]'],
    ['ebm_sigyp', 'f', {{electronBeam_rmsDivergY}}, 'vertical RMS angular divergence of electron beam [rad]'],
    ['ebm_mxxp', 'f', {{electronBeam_xxprX}}, 'horizontal position-angle mixed 2nd order moment of electron beam [m]'],
    ['ebm_myyp', 'f', {{electronBeam_xxprY}}, 'vertical position-angle mixed 2nd order moment of electron beam [m]'],
    {% endif %}

{% endif %}
{% if rs_type in ['u', 't'] %}
#---Undulator
#---idealized params
{% if rs_type != 'u' %}#{% endif %}    ['und_bx', 'f', {{undulator_horizontalAmplitude}}, 'undulator horizontal peak magnetic field [T]'],
{% if rs_type != 'u' %}#{% endif %}    ['und_by', 'f', {{undulator_verticalAmplitude}}, 'undulator vertical peak magnetic field [T]'],
{% if rs_type != 'u' %}#{% endif %}    ['und_phx', 'f', {{undulator_horizontalInitialPhase}}, 'initial phase of the horizontal magnetic field [rad]'],
{% if rs_type != 'u' %}#{% endif %}    ['und_phy', 'f', {{undulator_verticalInitialPhase}}, 'initial phase of the vertical magnetic field [rad]'],
{% if rs_type != 'u' %}#{% endif %}    ['und_sx', 'i', {{undulator_horizontalSymmetry}}, 'undulator horizontal magnetic field symmetry vs longitudinal position'],
{% if rs_type != 'u' %}#{% endif %}    ['und_sy', 'i', {{undulator_verticalSymmetry}}, 'undulator vertical magnetic field symmetry vs longitudinal position'],
{% if rs_type != 'u' %}#{% endif %}    ['und_b2e', '', '', 'estimate undulator fundamental photon energy (in [eV]) for the amplitude of sinusoidal magnetic field defined by und_b or und_bx, und_by', 'store_true'],
{% if rs_type != 'u' %}#{% endif %}    ['und_e2b', '', '', 'estimate undulator field amplitude (in [T]) for the photon energy defined by w_e', 'store_true'],
#---tabulated params
{% if rs_type != 't' %}#{% endif %}    ['und_g', 'f', {{tabulatedUndulator_gap}}, 'undulator gap [mm] (assumes availability of magnetic measurement or simulation data)'],
{% if rs_type != 't' %}#{% endif %}    ['und_ph', 'f', {{tabulatedUndulator_phase}}, 'shift of magnet arrays [mm] for which the field should be set up'],
{% if rs_type != 't' %}#{% endif %}    ['und_mdir', 's', '{{magneticMeasurementsDir}}', 'name of magnetic measurements sub-folder'],
{% if rs_type != 't' %}#{% endif %}    ['und_mfs', 's', '{{magneticMeasurementsIndexFile}}', 'name of magnetic measurements for different gaps summary file'],
#---both  params
    ['und_zc', 'f', {{undulator_longitudinalPosition}}, 'undulator center longitudinal position [m]'],
    ['und_per', 'f', {{undulator_period}}, 'undulator period [m]'],
    ['und_len', 'f', {{undulator_length}}, 'undulator length [m]'],

{% endif %}
{% if rs_type == 'a' %}
    ['mag_ior','f', {{arbitraryMagField_interpolationOrder}}, 'interpolation order to use for tabulated magnetic field (1<= mag_ior <= 3)'],
    ['mag_zc','f', {{arbitraryMagField_longitudinalPosition}}, 'center longitudinal position [m]'],
    ['mag_fn','s', '{{arbitraryMagField_magneticFile}}', 'input 3D magnetic field file name'],
{% endif %}

{% if rs_type == 'g' %}
    ['gbm_x', 'f', {{gaussianBeam_waistX}}, 'average horizontal coordinates of waist [m]'],
    ['gbm_y', 'f', {{gaussianBeam_waistY}}, 'average vertical coordinates of waist [m]'],
    ['gbm_z', 'f', {{gaussianBeam_waistZ}}, 'average longitudinal coordinate of waist [m]'],
    ['gbm_xp', 'f', {{gaussianBeam_waistAngleX}}, 'average horizontal angle at waist [rad]'],
    ['gbm_yp', 'f', {{gaussianBeam_waistAngleY}}, 'average verical angle at waist [rad]'],
    ['gbm_ave', 'f', {{gaussianBeam_photonEnergy}}, 'average photon energy [eV]'],
    ['gbm_pen', 'f', {{gaussianBeam_energyPerPulse}}, 'energy per pulse [J]'],
    ['gbm_rep', 'f', 1, 'rep. rate [Hz]'],
    ['gbm_pol', 'f', {{gaussianBeam_polarization}}, 'polarization 1- lin. hor., 2- lin. vert., 3- lin. 45 deg., 4- lin.135 deg., 5- circ. right, 6- circ. left'],
    ['gbm_sx', 'f', {{gaussianBeam_rmsSizeX}}, 'rms beam size vs horizontal position [m] at waist (for intensity)'],
    ['gbm_sy', 'f', {{gaussianBeam_rmsSizeY}}, 'rms beam size vs vertical position [m] at waist (for intensity)'],
    ['gbm_st', 'f', {{gaussianBeam_rmsPulseDuration}}, 'rms pulse duration [s] (for intensity)'],
    ['gbm_mx', 'f', 0, 'transverse Gauss-Hermite mode order in horizontal direction'],
    ['gbm_my', 'f', 0, 'transverse Gauss-Hermite mode order in vertical direction'],
    ['gbm_ca', 's', 'c', 'treat _sigX, _sigY as sizes in [m] in coordinate representation (_presCA="c") or as angular divergences in [rad] in angular representation (_presCA="a")'],
    ['gbm_ft', 's', 't', 'treat _sigT as pulse duration in [s] in time domain/representation (_presFT="t") or as bandwidth in [eV] in frequency domain/representation (_presFT="f")'],
{% endif %}

#---Calculation Types
    # Electron Trajectory
    ['tr', '', '', 'calculate electron trajectory', 'store_true'],
    ['tr_cti', 'f', {{trajectoryReport_initialTimeMoment}}, 'initial time moment (c*t) for electron trajectory calculation [m]'],
    ['tr_ctf', 'f', {{trajectoryReport_finalTimeMoment}}, 'final time moment (c*t) for electron trajectory calculation [m]'],
    ['tr_np', 'f', {{trajectoryReport_numberOfPoints}}, 'number of points for trajectory calculation'],
    ['tr_mag', 'i', {{simulation_magneticField}}, 'magnetic field to be used for trajectory calculation: 1- approximate, 2- accurate'],
    ['tr_fn', 's', '{{trajectoryReportFilename}}', 'file name for saving calculated trajectory data'],
    ['tr_pl', 's', '', 'plot the resulting trajectiry in graph(s): ""- dont plot, otherwise the string should list the trajectory components to plot'],

    #Single-Electron Spectrum vs Photon Energy
    ['ss', '', '', 'calculate single-e spectrum vs photon energy', 'store_true'],
    ['ss_ei', 'f', {{intensityReport_initialEnergy}}, 'initial photon energy [eV] for single-e spectrum vs photon energy calculation'],
    ['ss_ef', 'f', {{intensityReport_finalEnergy}}, 'final photon energy [eV] for single-e spectrum vs photon energy calculation'],
    ['ss_ne', 'i', {{intensityReport_photonEnergyPointCount}}, 'number of points vs photon energy for single-e spectrum vs photon energy calculation'],
    ['ss_x', 'f', {{intensityReport_horizontalPosition}}, 'horizontal position [m] for single-e spectrum vs photon energy calculation'],
    ['ss_y', 'f', {{intensityReport_verticalPosition}}, 'vertical position [m] for single-e spectrum vs photon energy calculation'],
    ['ss_meth', 'i', {{intensityReport_method}}, 'method to use for single-e spectrum vs photon energy calculation: 0- "manual", 1- "auto-undulator", 2- "auto-wiggler"'],
    ['ss_prec', 'f', {{intensityReport_precision}}, 'relative precision for single-e spectrum vs photon energy calculation (nominal value is 0.01)'],
    ['ss_pol', 'i', {{intensityReport_polarization}}, 'polarization component to extract after spectrum vs photon energy calculation: 0- Linear Horizontal, 1- Linear Vertical, 2- Linear 45 degrees, 3- Linear 135 degrees, 4- Circular Right, 5- Circular Left, 6- Total'],
    ['ss_mag', 'i', {{simulation_magneticField}}, 'magnetic field to be used for single-e spectrum vs photon energy calculation: 1- approximate, 2- accurate'],
    ['ss_ft', 's', 'f', 'presentation/domain: "f"- frequency (photon energy), "t"- time'],
    ['ss_u', 'i', {{intensityReport_fieldUnits}}, 'electric field units: 0- arbitrary, 1- sqrt(Phot/s/0.1%bw/mm^2), 2- sqrt(J/eV/mm^2) or sqrt(W/mm^2), depending on representation (freq. or time)'],
    ['ss_fn', 's', '{{intensityReportFilename}}', 'file name for saving calculated single-e spectrum vs photon energy'],
    ['ss_pl', 's', '', 'plot the resulting single-e spectrum in a graph: ""- dont plot, "e"- show plot vs photon energy'],

    #Multi-Electron Spectrum vs Photon Energy (taking into account e-beam emittance, energy spread and collection aperture size)
    ['sm', '', '{{fluxAnimation}}', 'calculate multi-e spectrum vs photon energy', 'store_true'],
    ['sm_ei', 'f', {{fluxReport_initialEnergy}}, 'initial photon energy [eV] for multi-e spectrum vs photon energy calculation'],
    ['sm_ef', 'f', {{fluxReport_finalEnergy}}, 'final photon energy [eV] for multi-e spectrum vs photon energy calculation'],
    ['sm_ne', 'i', {{fluxReport_photonEnergyPointCount}}, 'number of points vs photon energy for multi-e spectrum vs photon energy calculation'],
    ['sm_x', 'f', {{fluxReport_horizontalPosition}}, 'horizontal center position [m] for multi-e spectrum vs photon energy calculation'],
    ['sm_rx', 'f', {{fluxReport_horizontalApertureSize}}, 'range of horizontal position / horizontal aperture size [m] for multi-e spectrum vs photon energy calculation'],
    ['sm_nx', 'i', 1, 'number of points vs horizontal position for multi-e spectrum vs photon energy calculation'],
    ['sm_y', 'f', {{fluxReport_verticalPosition}}, 'vertical center position [m] for multi-e spectrum vs photon energy calculation'],
    ['sm_ry', 'f', {{fluxReport_verticalApertureSize}}, 'range of vertical position / vertical aperture size [m] for multi-e spectrum vs photon energy calculation'],
    ['sm_ny', 'i', 1, 'number of points vs vertical position for multi-e spectrum vs photon energy calculation'],
    ['sm_mag', 'i', {{fluxReport_magneticField}}, 'magnetic field to be used for calculation of multi-e spectrum spectrum or intensity distribution: 1- approximate, 2- accurate'],
    ['sm_hi', 'i', {{fluxReport_initialHarmonic}}, 'initial UR spectral harmonic to be taken into account for multi-e spectrum vs photon energy calculation'],
    ['sm_hf', 'i', {{fluxReport_finalHarmonic}}, 'final UR spectral harmonic to be taken into account for multi-e spectrum vs photon energy calculation'],
    ['sm_prl', 'f', {{fluxReport_longitudinalPrecision}}, 'longitudinal integration precision parameter for multi-e spectrum vs photon energy calculation'],
    ['sm_pra', 'f', {{fluxReport_azimuthalPrecision}}, 'azimuthal integration precision parameter for multi-e spectrum vs photon energy calculation'],
    ['sm_meth', 'i', {{fluxReport_method}}, 'method to use for spectrum vs photon energy calculation in case of arbitrary input magnetic field: 0- "manual", 1- "auto-undulator", 2- "auto-wiggler", -1- dont use this accurate integration method (rather use approximate if possible)'],
    ['sm_prec', 'f', {{fluxReport_precision}}, 'relative precision for spectrum vs photon energy calculation in case of arbitrary input magnetic field (nominal value is 0.01)'],
    ['sm_nm', 'i', {{fluxReport_numberOfMacroElectrons}}, 'number of macro-electrons for calculation of spectrum in case of arbitrary input magnetic field'],
    ['sm_na', 'i', {{fluxAnimation_numberOfMacroElectronsAvg}}, 'number of macro-electrons to average on each node at parallel (MPI-based) calculation of spectrum in case of arbitrary input magnetic field'],
    ['sm_ns', 'i', {{fluxAnimation_savingPeriodicity}}, 'saving periodicity (in terms of macro-electrons) for intermediate intensity at calculation of multi-electron spectrum in case of arbitrary input magnetic field'],
    ['sm_type', 'i', {{fluxReport_fluxType}}, 'calculate flux (=1) or flux per unit surface (=2)'],
    ['sm_pol', 'i', {{fluxReport_polarization}}, 'polarization component to extract after calculation of multi-e flux or intensity: 0- Linear Horizontal, 1- Linear Vertical, 2- Linear 45 degrees, 3- Linear 135 degrees, 4- Circular Right, 5- Circular Left, 6- Total'],
    ['sm_rm', 'i', 1, 'method for generation of pseudo-random numbers for e-beam phase-space integration: 1- standard pseudo-random number generator, 2- Halton sequences, 3- LPtau sequences (to be implemented)'],
    ['sm_fn', 's', '{{fluxReportFilename}}', 'file name for saving calculated milti-e spectrum vs photon energy'],
    ['sm_pl', 's', '', 'plot the resulting spectrum-e spectrum in a graph: ""- dont plot, "e"- show plot vs photon energy'],
    #to add options for the multi-e calculation from "accurate" magnetic field

    #Power Density Distribution vs horizontal and vertical position
    ['pw', '', '', 'calculate SR power density distribution', 'store_true'],
    ['pw_x', 'f', {{powerDensityReport_horizontalPosition}}, 'central horizontal position [m] for calculation of power density distribution vs horizontal and vertical position'],
    ['pw_rx', 'f', {{powerDensityReport_horizontalRange}}, 'range of horizontal position [m] for calculation of power density distribution vs horizontal and vertical position'],
    ['pw_nx', 'i', {{powerDensityReport_horizontalPointCount}}, 'number of points vs horizontal position for calculation of power density distribution'],
    ['pw_y', 'f', {{powerDensityReport_verticalPosition}}, 'central vertical position [m] for calculation of power density distribution vs horizontal and vertical position'],
    ['pw_ry', 'f', {{powerDensityReport_verticalRange}}, 'range of vertical position [m] for calculation of power density distribution vs horizontal and vertical position'],
    ['pw_ny', 'i', {{powerDensityReport_verticalPointCount}}, 'number of points vs vertical position for calculation of power density distribution'],
    ['pw_pr', 'f', {{powerDensityReport_precision}}, 'precision factor for calculation of power density distribution'],
    ['pw_meth', 'i', {{powerDensityReport_method}}, 'power density computation method (1- "near field", 2- "far field")'],
    ['pw_zst', 'f', 0., 'initial longitudinal position along electron trajectory of power density distribution (effective if pow_sst < pow_sfi)'],
    ['pw_zfi', 'f', 0., 'final longitudinal position along electron trajectory of power density distribution (effective if pow_sst < pow_sfi)'],
    ['pw_mag', 'i', {{simulation_magneticField}}, 'magnetic field to be used for power density calculation: 1- approximate, 2- accurate'],
    ['pw_fn', 's', '{{powerDensityReportFilename}}', 'file name for saving calculated power density distribution'],
    ['pw_pl', 's', '', 'plot the resulting power density distribution in a graph: ""- dont plot, "x"- vs horizontal position, "y"- vs vertical position, "xy"- vs horizontal and vertical position'],

    #Single-Electron Intensity distribution vs horizontal and vertical position
    ['si', '', '', 'calculate single-e intensity distribution (without wavefront propagation through a beamline) vs horizontal and vertical position', 'store_true'],
    #Single-Electron Wavefront Propagation
    ['ws', '', '', 'calculate single-electron (/ fully coherent) wavefront propagation', 'store_true'],
    #Multi-Electron (partially-coherent) Wavefront Propagation
    ['wm', '', '', 'calculate multi-electron (/ partially coherent) wavefront propagation', 'store_true'],

    ['w_e', 'f', {{simulation_photonEnergy}}, 'photon energy [eV] for calculation of intensity distribution vs horizontal and vertical position'],
    ['w_ef', 'f', {{simulation_finalPhotonEnergy}}, 'final photon energy [eV] for calculation of intensity distribution vs horizontal and vertical position'],
    ['w_ne', 'i', 1, 'number of points vs photon energy for calculation of intensity distribution'],
    ['w_x', 'f', {{simulation_horizontalPosition}}, 'central horizontal position [m] for calculation of intensity distribution'],
    ['w_rx', 'f', {{simulation_horizontalRange}}, 'range of horizontal position [m] for calculation of intensity distribution'],
    ['w_nx', 'i', {{simulation_horizontalPointCount}}, 'number of points vs horizontal position for calculation of intensity distribution'],
    ['w_y', 'f', {{simulation_verticalPosition}}, 'central vertical position [m] for calculation of intensity distribution vs horizontal and vertical position'],
    ['w_ry', 'f', {{simulation_verticalRange}}, 'range of vertical position [m] for calculation of intensity distribution vs horizontal and vertical position'],
    ['w_ny', 'i', {{simulation_verticalPointCount}}, 'number of points vs vertical position for calculation of intensity distribution'],
    ['w_smpf', 'f', {{simulation_sampleFactor}}, 'sampling factor for calculation of intensity distribution vs horizontal and vertical position'],
    ['w_meth', 'i', {{simulation_method}}, 'method to use for calculation of intensity distribution vs horizontal and vertical position: 0- "manual", 1- "auto-undulator", 2- "auto-wiggler"'],
    ['w_prec', 'f', {{simulation_precision}}, 'relative precision for calculation of intensity distribution vs horizontal and vertical position'],
    ['w_mag', 'i', {{simulation_magneticField}}, 'magnetic field to be used for calculation of intensity distribution vs horizontal and vertical position: 1- approximate, 2- accurate'],
    ['w_u', 'i', {{simulation_fieldUnits}}, 'electric field units: 0- arbitrary, 1- sqrt(Phot/s/0.1%bw/mm^2), 2- sqrt(J/eV/mm^2) or sqrt(W/mm^2), depending on representation (freq. or time)'],

    ['si_pol', 'i', {{initialIntensityReport_polarization}}, 'polarization component to extract after calculation of intensity distribution: 0- Linear Horizontal, 1- Linear Vertical, 2- Linear 45 degrees, 3- Linear 135 degrees, 4- Circular Right, 5- Circular Left, 6- Total'],
    ['si_type', 'i', {{initialIntensityReport_characteristic}}, 'type of a characteristic to be extracted after calculation of intensity distribution: 0- Single-Electron Intensity, 1- Multi-Electron Intensity, 2- Single-Electron Flux, 3- Multi-Electron Flux, 4- Single-Electron Radiation Phase, 5- Re(E): Real part of Single-Electron Electric Field, 6- Im(E): Imaginary part of Single-Electron Electric Field, 7- Single-Electron Intensity, integrated over Time or Photon Energy'],
    ['si_fn', 's', '{{initialIntensityReportFilename}}', 'file name for saving calculated single-e intensity distribution (without wavefront propagation through a beamline) vs horizontal and vertical position'],
    ['si_pl', 's', '', 'plot the input intensity distributions in graph(s): ""- dont plot, "x"- vs horizontal position, "y"- vs vertical position, "xy"- vs horizontal and vertical position'],
    ['ws_fni', 's', '{{watchpointReportFilename}}', '{{ ws_fni_desc }}'],
    ['ws_pl', 's', '', 'plot the resulting intensity distributions in graph(s): ""- dont plot, "x"- vs horizontal position, "y"- vs vertical position, "xy"- vs horizontal and vertical position'],

    ['wm_nm', 'i', {{multiElectronAnimation_numberOfMacroElectrons}}, 'number of macro-electrons (coherent wavefronts) for calculation of multi-electron wavefront propagation'],
    ['wm_na', 'i', {{multiElectronAnimation_numberOfMacroElectronsAvg}}, 'number of macro-electrons (coherent wavefronts) to average on each node for parallel (MPI-based) calculation of multi-electron wavefront propagation'],
    ['wm_ns', 'i', {{multiElectronAnimation_savingPeriodicity}}, 'saving periodicity (in terms of macro-electrons / coherent wavefronts) for intermediate intensity at multi-electron wavefront propagation calculation'],
    ['wm_ch', 'i', {{multiElectronCharacteristic or 0}}, 'type of a characteristic to be extracted after calculation of multi-electron wavefront propagation: #0- intensity (s0); 1- four Stokes components; 2- mutual intensity cut vs x; 3- mutual intensity cut vs y; 40- intensity(s0), mutual intensity cuts and degree of coherence vs X & Y'],
    ['wm_ap', 'i', {{multiElectronAnimation_stokesParameter}}, 'switch specifying representation of the resulting Stokes parameters: coordinate (0) or angular (1)'],
    ['wm_x0', 'f', {{multiElectronAnimation_horizontalPosition}}, 'horizontal center position for mutual intensity cut calculation'],
    ['wm_y0', 'f', {{multiElectronAnimation_verticalPosition}}, 'vertical center position for mutual intensity cut calculation'],
    ['wm_ei', 'i', {{multiElectronAnimation_photonEnergyIntegration}}, 'integration over photon energy is required (1) or not (0); if the integration is required, the limits are taken from w_e, w_ef'],
    ['wm_rm', 'i', 1, 'method for generation of pseudo-random numbers for e-beam phase-space integration: 1- standard pseudo-random number generator, 2- Halton sequences, 3- LPtau sequences (to be implemented)'],
    ['wm_am', 'i', {{multiElectronAnimation_integrationMethod}}, 'multi-electron integration approximation method: 0- no approximation (use the standard 5D integration method), 1- integrate numerically only over e-beam energy spread and use convolution to treat transverse emittance'],
    ['wm_fni', 's', '{{multiElectronAnimationFilename}}', 'file name for saving propagated multi-e intensity distribution vs horizontal and vertical position'],
    ['wm_ff', 's', '{{multiElectronFileFormat or 'ascii'}}', 'format of file name for saving propagated multi-e intensity distribution vs horizontal and vertical position (ascii and hdf5 supported)'],

    ['wm_nmm', 'i', {{mpiGroupCount or 1}}, 'number of MPI masters to use'],
    ['wm_ncm', 'i', {{coherentModesAnimation_numberOfCoherentModes}}, 'number of Coherent Modes to calculate'],
    ['wm_acm', 's', 'SP', 'coherent mode decomposition algorithm to be used (supported algorithms are: "SP" for SciPy, "SPS" for SciPy Sparse, "PM" for Primme, based on names of software packages)'],
    ['wm_nop', '', '', 'switch forcing to do calculations ignoring any optics defined (by set_optics function)', 'store_true'],

    ['wm_fnmi', 's', '', 'file name of input cross-spectral density / mutual intensity; if this file name is supplied, the initial cross-spectral density (for such operations as coherent mode decomposition) will not be calculated, but rathre it will be taken from that file.'],
    ['wm_fncm', 's', '{{coherentModesFile}}', 'file name of input coherent modes; if this file name is supplied, the eventual partially-coherent radiation propagation simulation will be done based on propagation of the coherent modes from that file.'],

    ['wm_fbk', '', '{{sbatchBackup}}', 'create backup file(s) with propagated multi-e intensity distribution vs horizontal and vertical position and other radiation characteristics', 'store_true'],

    # Optics parameters
    ['op_r', 'f', {{beamlineFirstElementPosition}}, 'longitudinal position of the first optical element [m]'],
    {% if beamline3DReport %}
    ['op_fno', 's', '{{beamline3DReportFilename}}', 'file name for saving orientations of optical elements in the lab frame'],
    {% endif %}
{% if useDetector == '1' %}
    #Detector parameters
    ['d_x', 'f', {{detector_d_x}}, 'central horizontal position [m] of detector active area'],
    ['d_rx', 'f', {{detector_d_rx}}, 'range of horizontal position [m] of detector active area (should be >0 to be taken into account)'],
    ['d_nx', 'i', {{detector_d_nx}}, 'number of pixels vs horizontal position (should be >0 to be taken into account)'],
    ['d_dx', 'f', 0., 'horizontal size of pixel [m]'],
    ['d_y', 'f', {{detector_d_y}}, 'central vertical position [m] of detector active area'],
    ['d_ry', 'f', {{detector_d_ry}}, 'range of vertical position [m] of detector active area (should be >0 to be taken into account)'],
    ['d_ny', 'i', {{detector_d_ny}}, 'number of pixels vs vertical position (should be >0 to be taken into account)'],
    ['d_dy', 'f', 0., 'vertical size of pixel [m]'],
    ['d_or', 'f', 1, 'interpolation order (i.e. order of polynomials to be used at 2D interpolation)'],
    ['d_ifn', 's', '', 'file name with detector spectral efficiency data (on 1D mesh vs photon energy: _eStart, _eFin, _ne)'],

{% endif %}
    # Former appParam:
    ['rs_type', 's', '{{rs_type}}', 'source type, (u) idealized undulator, (t), tabulated undulator, (m) multipole, (g) gaussian beam'],
{% if rs_type == 'm' %}
#---Multipole
    ['mag_by', 'f', {{multipole_by}}, 'vertical magnetic field [T]'],
    ['mag_bx', 'f', {{multipole_bx}}, 'horizontal magnetic field [T]'],
    ['mag_gn', 'f', 0., 'gradient of normal magnetic field quadrupole [T/m]'],
    ['mag_gs', 'f', 0., 'gradient of skew magnetic field quadrupole [T/m]'],
    ['mag_len', 'f', {{multipole_length}}, 'magnetic length [m]'],
    ['mag_led', 'f', {{multipole_edge}}, 'magnetic edge length bw 10% and 90% of peak field [m]; G/(1 + ((z-zc)/d)^2)^2 field dependence is assumed'],
    ['mag_r', 'f', 0., 'radius of curvature of central trajectory [m] (for simulating e.g. quadrupole component integrated to a bending magnet; effective if > 0)'],
    ['mag_zc', 'f', {{multipole_longitudinalPosition}}, 'center longitudinal position [m]'],
{% endif %}

    {% if beamlineOpticsParameters %}
#---Beamline optics:{{beamlineOpticsParameters}}
    {% endif %}
    #[ 0]: Auto-Resize (1) or not (0) Before propagation
    #[ 1]: Auto-Resize (1) or not (0) After propagation
    #[ 2]: Relative Precision for propagation with Auto-Resizing (1. is nominal)
    #[ 3]: Allow (1) or not (0) for semi-analytical treatment of the quadratic (leading) phase terms at the propagation
    #[ 4]: Do any Resizing on Fourier side, using FFT, (1) or not (0)
    #[ 5]: Horizontal Range modification factor at Resizing (1. means no modification)
    #[ 6]: Horizontal Resolution modification factor at Resizing
    #[ 7]: Vertical Range modification factor at Resizing
    #[ 8]: Vertical Resolution modification factor at Resizing
    #[ 9]: Type of wavefront Shift before Resizing (not yet implemented)
    #[10]: New Horizontal wavefront Center position after Shift (not yet implemented)
    #[11]: New Vertical wavefront Center position after Shift (not yet implemented)
    #[12]: Optional: Orientation of the Output Optical Axis vector in the Incident Beam Frame: Horizontal Coordinate
    #[13]: Optional: Orientation of the Output Optical Axis vector in the Incident Beam Frame: Vertical Coordinate
    #[14]: Optional: Orientation of the Output Optical Axis vector in the Incident Beam Frame: Longitudinal Coordinate
    #[15]: Optional: Orientation of the Horizontal Base vector of the Output Frame in the Incident Beam Frame: Horizontal Coordinate
    #[16]: Optional: Orientation of the Horizontal Base vector of the Output Frame in the Incident Beam Frame: Vertical Coordinate
]

{% if setupMagneticMeasurementFiles %}
def setup_magnetic_measurement_files(filename, v):
    import os
    c = None
    f = None
    r = 0
    try:
        import mpi4py.MPI
        if mpi4py.MPI.COMM_WORLD.Get_size() > 1:
            c = mpi4py.MPI.COMM_WORLD
            r = c.Get_rank()
    except Exception:
        pass
    if r == 0:
        try:
            import zipfile
            z = zipfile.ZipFile(filename)
            f = [x for x in z.namelist() if x.endswith('.txt')]
            if len(f) != 1:
                raise RuntimeError(
                    '{} magnetic measurement index (*.txt) file={}'.format(
                        'too many' if len(f) > 0 else 'missing',
                        filename,
                    )
                )
            f = f[0]
            z.extractall(v.fdir)
        except Exception:
            if c:
                c.Abort(1)
            raise
    if c:
        f = c.bcast(f, root=0)
    v.und_mfs = os.path.basename(f)
    v.und_mdir = os.path.dirname(f) or './'
{% endif %}

{% if forRSOpt %}
def _apply_rotation(angle, norms):
    rx = numpy.array([[1, 0, 0], [0, numpy.cos(angle[0]), -numpy.sin(angle[0])], [0, numpy.sin(angle[0]), numpy.cos(angle[0])]])
    ry = numpy.array([[numpy.cos(angle[1]), 0, numpy.sin(angle[1])], [0, 1, 0], [-numpy.sin(angle[1]), 0, numpy.cos(angle[1])]])
    rz = numpy.array([[numpy.cos(angle[2]), -numpy.sin(angle[2]), 0], [numpy.sin(angle[2]), numpy.cos(angle[2]), 0], [0, 0, 1]])

    rxy = numpy.dot(rx, ry)
    r = numpy.dot(rxy ,rz)

    return numpy.dot(r, norms)


def _get_beamline_param(vp, srw_prefix, sirepo_name):
    for p_arr in vp:
        if p_arr[0].startswith(srw_prefix) and p_arr[3] == sirepo_name:
            return p_arr
    return None


def _read_srw_file(filename):
    import srwpy.uti_plot_com
    """ This function takes in an srw file and returns the beam data. This was adapted from srwl_uti_dataProcess.py file"""
    data, mode, ranges, labels, units = srwpy.uti_plot_com.file_load(filename)
    data = numpy.array(data).reshape((ranges[8], ranges[5]), order='C')
    '''
    return {'data': data,
            'shape': data.shape,
            'mean': numpy.mean(data),
            'photon_energy': ranges[0],
            'horizontal_extent': ranges[3:5],
            'vertical_extent': ranges[6:8],
            'labels': labels,
            'units': units}
    '''
    return data


def rsopt_run({{ rsOptFuctionSignature() }}):
    vp = _rsopt_set_params({{ rsOptFuctionSignature() }})
    f = _get_beamline_param(
        vp,
        'ws_fni',
        '{{ ws_fni_desc }}'
    )
    f[2] = 'res_int_se.dat'
{{srwMain}}
    beam = _read_srw_file(f[2])
    h = beam.shape[0]
    w = beam.shape[1]
    beam = beam.reshape(1, h, w)
    numpy.save('beam.npy', beam)
    numpy.save('params.npy', [{{ rsOptFuctionSignature(true) }}])
    numpy.save('values.npy', [{{ rsOptFuctionSignature() }}])


def _rsopt_set_params({{ rsOptFuctionSignature() }}):
    vp = varParam.copy()
    {% for e in rsOptElements %}
    {% for p in rsOptParamsNoRotation %}
    {% if p in e %}
    {% for x in e[p].initial %}
    {% if e[p].offsets[loop.index0] != 0 %}
    p = _get_beamline_param(vp, 'op_{{ fixSpaces(e.title) }}', '{{ e[p].fieldNames[loop.index0] }}')
    if p:
        p[2] = {{ fixSpaces(e.title) }}_{{ e[p].fieldNames[loop.index0] }}
    {% endif %}
    {% endfor %}
    {% endif %}
    {% endfor %}
    {% if 'rotation' in e %}
# Rotations require special handling
    {% if e.rotation.offsets[0] != 0 or e.rotation.offsets[1] != 0 or e.rotation.offsets[2] != 0 %}
    a = [0.0, 0.0, 0.0]
    {% for t in e.rotation.initial %}
    {% if e.rotation.offsets[loop.index0] != 0 %}
    a[{{ loop.index0 }}] = {{ fixSpaces(e.title) }}_{{ e.rotation.fieldNames[loop.index0] }}
    {% endif %}
    {% endfor %}
    n = _apply_rotation(a, {{ e.rotation.initial }})
    {% for t in e.rotation.fieldNames %}
    t = _get_beamline_param(vp, 'op_{{ fixSpaces(e.title) }}', '{{ t }}')
    if t:
        t[2] = n[{{ loop.index0 }}]
    {% endfor %}
    {% endif %}
    {% endif %}
    {% endfor %}
    _get_beamline_param(
        vp,
        'si_type',
        'type of a characteristic to be extracted after calculation of intensity distribution: 0- Single-Electron Intensity, 1- Multi-Electron Intensity, 2- Single-Electron Flux, 3- Multi-Electron Flux, 4- Single-Electron Radiation Phase, 5- Re(E): Real part of Single-Electron Electric Field, 6- Im(E): Imaginary part of Single-Electron Electric Field, 7- Single-Electron Intensity, integrated over Time or Photon Energy'
    )[2] = {{ rsOptCharacteristic }}

    return vp

{% endif %}

def epilogue():
    {% if in_server %}
    sirepo.template.run_epilogue('srw')
    {% else %}
    pass
    {% endif %}


def main():
{{srwMain}}
epilogue()
