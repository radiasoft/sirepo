
from sirepo.template.srwl_uti_brightness import *
import srwpy.srwlib

def main():
    lam_u = {{ undulator_period }} * 100.0 # undulator.period in cm
    nPer = int({{ undulator_length }} / {{ undulator_period }}) # undulator.length / undulator.period
    columns = []
    header = []

{% if brillianceReport_brightnessComponent == 'spectral-detuning' %}
    harmNum = int({{ brillianceReport_harmonic }})
    k = math.sqrt({{ undulator_horizontalDeflectingParameter }} ** 2 + {{ undulator_verticalDeflectingParameter }} ** 2)
    peak = getE(harmNum, {{ electronBeam_energy }}, k, lam_u / 100)

    {% if brillianceReport_reportType == '0' %}
    header.append('f{} [Ph/s/.1%], e{} [eV]'.format(harmNum, harmNum))
    # Ib,kx,kz,E_elec,lam_u,phix,phiz,n,nPer,epeak,emin,emax,numepts, relEnSpr
    (x, y) = srwl_und_flux_en_fixedK(
        {{ electronBeam_current }}, # electronBeam.current
        {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
        {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
        {{ electronBeam_energy }}, # electronBeam.energy
        lam_u, # undulator period in cm
        {{ undulator_horizontalInitialPhase }}, # undulator.horizontalInitialPhase
        {{ undulator_verticalInitialPhase }}, # undulator.verticalInitialPhase
        harmNum,
        nPer,
        peak,
        peak - {{ brillianceReport_energyDelta }},
        peak + {{ brillianceReport_energyDelta }},
        {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
        {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
    )
    {% elif brillianceReport_reportType == '2' %}
    header.append('f{} [Ph/s/.1/mr2/mm2], e{} [eV]'.format(harmNum, harmNum))
    # Ib,kx,kz,phix,phiz,n,E_elec,lam_u,nPer,epeak,emin,emax,numepts,relEnSpr,L,sigxsq,sigysq,sigxpsq,sigypsq
    (x, y) = srwl_und_bright_en_fixedK(
        {{ electronBeam_current }}, # electronBeam.current
        {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
        {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
        {{ undulator_horizontalInitialPhase }}, # undulator.horizontalInitialPhase
        {{ undulator_verticalInitialPhase }}, # undulator.verticalInitialPhase
        harmNum,
        {{ electronBeam_energy }}, # electronBeam.energy
        lam_u, # undulator period in cm
        nPer,
        peak,
        peak - {{ brillianceReport_energyDelta }},
        peak + {{ brillianceReport_energyDelta }},
        {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
        {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
        {{ undulator_length }}, # undulator.length
        {{ electronBeam_rmsSizeX }} ** 2, # electronBeam.rmsSizeX
        {{ electronBeam_rmsSizeY }} ** 2, # electronBeam.rmsSizeY
        {{ electronBeam_rmsDivergX }} ** 2, # electronBeam.rmsDivergX
        {{ electronBeam_rmsDivergY }} ** 2, # electronBeam.rmsDivergY
    )
    {% elif brillianceReport_reportType == '3' or brillianceReport_reportType == '4' %}
    header.append('f{} [rad], e{} [eV]'.format(harmNum, harmNum))
    # sigsq,L,K,E_elec,lam_u,n,nPer,epeak,emin,emax,numepts,relEnSpr
        {% if brillianceReport_reportType == '3' %}
    sigsq = {{ electronBeam_rmsSizeX }} ** 2, # electronBeam.rmsSizeX
        {% else %}
    sigsq = {{ electronBeam_rmsSizeY }} ** 2, # electronBeam.rmsSizeY
        {% endif %}
    (x, y) = srwl_und_div_en_fixedK(
        sigsq,
        {{ undulator_length }}, # undulator.length
        k,
        {{ electronBeam_energy }},  # electronBeam.energy
        lam_u, # undulator period in cm
        harmNum,
        nPer,
        peak,
        peak - {{ brillianceReport_energyDelta }},
        peak + {{ brillianceReport_energyDelta }},
        {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
        {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
    )
    {% elif brillianceReport_reportType == '5' or brillianceReport_reportType == '6' %}
    header.append('f{} [m], e{} [eV]'.format(harmNum, harmNum))
    # sigsq,L,K,E_elec,lam_u,n,nPer,epeak,emin,emax,numepts,relEnSpr
        {% if brillianceReport_reportType == '5' %}
    sigsq = {{ electronBeam_rmsSizeX }} ** 2, # electronBeam.rmsSizeX
        {% else %}
    sigsq = {{ electronBeam_rmsSizeY }} ** 2, # electronBeam.rmsSizeY
        {% endif %}
    (x, y) = srwl_und_size_en_fixedK(
        sigsq,
        {{ undulator_length }}, # undulator.length
        k,
        {{ electronBeam_energy }},  # electronBeam.energy
        lam_u, # undulator period in cm
        harmNum,
        nPer,
        peak,
        peak - {{ brillianceReport_energyDelta }},
        peak + {{ brillianceReport_energyDelta }},
        {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
        {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
    )
    {% endif %}
    columns.append(x.tolist())
    columns.append(y)
{% else %}
    for harmNum in range({{ brillianceReport_initialHarmonic }}, {{ brillianceReport_finalHarmonic }} + 1):
        if harmNum % 2:
    {% if brillianceReport_reportType == '0' %}
            header.append('f{} [Ph/s/.1%], e{} [eV]'.format(harmNum, harmNum))
            # Ib,kxmax,kzmax,kmin,numkpts,E_elec,lam_u,phix,phiz,n,nPer,enDetPar,relEnSpr
            (x, y) = srwl_und_flux_en(
                {{ electronBeam_current }}, # electronBeam.current
                {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
                {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
                {{ brillianceReport_minDeflection }}, # brillianceReport.minDeflection
                {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
                {{ electronBeam_energy }}, # electronBeam.energy
                lam_u, # undulator period in cm
                {{ undulator_horizontalInitialPhase }}, # undulator.horizontalInitialPhase
                {{ undulator_verticalInitialPhase }}, # undulator.verticalInitialPhase
                harmNum,
                nPer,
                {{ brillianceReport_detuning }}, # brillianceReport.detuning
                {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
            )
    {% elif brillianceReport_reportType == '1' %}
            header.append('f{} [Ph/s/.1%bw/mrad2], e{} [eV]'.format(harmNum, harmNum))
            # Ib,kxmax,kzmax,kmin,numkpts,E_elec,lam_u,phix,phiz,n,nPer,enDetPar,relEnSpr,sigpxsq,sigpzsq
            (x, y) = srwl_und_ang_flux_en(
                {{ electronBeam_current }}, # electronBeam.current
                {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
                {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
                {{ brillianceReport_minDeflection }}, # brillianceReport.minDeflection
                {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
                {{ electronBeam_energy }}, # electronBeam.energy
                lam_u, # undulator period in cm
                {{ undulator_horizontalInitialPhase }}, # undulator.horizontalInitialPhase
                {{ undulator_verticalInitialPhase }}, # undulator.verticalInitialPhase
                harmNum,
                nPer,
                {{ brillianceReport_detuning }}, # brillianceReport.detuning
                {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
                {{ electronBeam_rmsDivergX }} ** 2, # electronBeam.rmsDivergX
                {{ electronBeam_rmsDivergY }} ** 2, # electronBeam.rmsDivergY
            )
    {% elif brillianceReport_reportType == '2' %}
            header.append('f{} [Ph/s/.1/mr2/mm2], e{} [eV]'.format(harmNum, harmNum))
            # Ib,kx,kz,phix,phiz,n,E_elec,lam_u,nPer,epeak,enDetPar,relEnSpr,L,sigxsq,sigzsq,sigxpsq,sigzpsq,kxmax,kzmax,kmin,numkpts
            (x, y) = srwl_und_bright_en(
                {{ electronBeam_current }}, # electronBeam.current
                {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
                {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
                {{ undulator_horizontalInitialPhase }}, # undulator.horizontalInitialPhase
                {{ undulator_verticalInitialPhase }}, # undulator.verticalInitialPhase
                harmNum,
                {{ electronBeam_energy }}, # electronBeam.energy
                lam_u, # undulator period in cm
                nPer,
                0, # epeak not used
                {{ brillianceReport_detuning }}, # brillianceReport.detuning
                {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
                {{ undulator_length }}, # undulator.length
                {{ electronBeam_rmsSizeX }} ** 2, # electronBeam.rmsSizeX
                {{ electronBeam_rmsSizeY }} ** 2, # electronBeam.rmsSizeY
                {{ electronBeam_rmsDivergX }} ** 2, # electronBeam.rmsDivergX
                {{ electronBeam_rmsDivergY }} ** 2, # electronBeam.rmsDivergY
                {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
                {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
                {{ brillianceReport_minDeflection }}, # brillianceReport.minDeflection
                {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
            )

    {% elif brillianceReport_reportType == '3' or brillianceReport_reportType == '4' %}
            header.append('f{} [rad], e{} [eV]'.format(harmNum, harmNum))
        {% if brillianceReport_reportType == '3' %}
            sigpsq = {{ electronBeam_rmsDivergX }} ** 2, # electronBeam.rmsDivergX
        {% else %}
            sigpsq = {{ electronBeam_rmsDivergY }} ** 2, # electronBeam.rmsDivergY
        {% endif %}
            # kxmax,kzmax,kmin,numkpts,E_elec,lam_u,phix,phiz,n,nPer,enDetPar,relEnSpr,sigpsq
            (x, y) = srwl_und_div_en(
                {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
                {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
                {{ brillianceReport_minDeflection }}, # brillianceReport.minDeflection
                {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
                {{ electronBeam_energy }}, # electronBeam.energy
                lam_u, # undulator period in cm
                {{ undulator_horizontalInitialPhase }}, # undulator.horizontalInitialPhase
                {{ undulator_verticalInitialPhase }}, # undulator.verticalInitialPhase
                harmNum,
                nPer,
                {{ brillianceReport_detuning }}, # brillianceReport.detuning
                {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
                sigpsq,
            )
    {% elif brillianceReport_reportType == '5' or brillianceReport_reportType == '6' %}
            header.append('f{} [m], e{} [eV]'.format(harmNum, harmNum))
        {% if brillianceReport_reportType == '5' %}
            sigxsq = {{ electronBeam_rmsSizeX }} ** 2, # electronBeam.rmsSizeX
        {% else %}
            sigxsq = {{ electronBeam_rmsSizeY }} ** 2, # electronBeam.rmsSizeX
        {% endif %}
            # kxmax,kzmax,kmin,numkpts,E_elec,lam_u,phix,phiz,n,nPer,enDetPar,relEnSpr,sigxsq
            (x, y) = srwl_und_size_en(
                {{ undulator_horizontalDeflectingParameter }}, # undulator.horizontalDeflectingParameter
                {{ undulator_verticalDeflectingParameter }}, # undulator.verticalDeflectingParameter
                {{ brillianceReport_minDeflection }}, # brillianceReport.minDeflection
                {{ brillianceReport_energyPointCount }}, # brillianceReport.energyPointCount
                {{ electronBeam_energy }}, # electronBeam.energy
                lam_u, # undulator period in cm
                {{ undulator_horizontalInitialPhase }}, # undulator.horizontalInitialPhase
                {{ undulator_verticalInitialPhase }}, # undulator.verticalInitialPhase
                harmNum,
                nPer,
                {{ brillianceReport_detuning }}, # brillianceReport.detuning
                {{ electronBeam_rmsSpread }}, # electronBeam.rmsSpread
                sigxsq,
            )
    {% else %}
            assert False, 'invalid Brilliance Report Type: {}'.format({{ brillianceReport_reportType }})
    {% endif %}
            columns.append(x.tolist())
            columns.append(y)
{% endif %}
    srwpy.srwlib.srwl_uti_write_data_cols('res_brilliance.dat', columns, '\t', '#' + ', '.join(header))

main()
