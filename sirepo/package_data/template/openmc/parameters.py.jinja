import os
{{ weightWindowsThreadLimit }}
import numpy
import openmc
import openmc.lib
# this import add openmc.Materials.download_cross_section_data()
import openmc_data_downloader


{% if generateMGXS %}
def create_mgxs_library(geometry, materials):
    mgxs_lib = openmc.mgxs.Library(geometry)
    mgxs_lib.energy_groups = openmc.mgxs.EnergyGroups(
        openmc.mgxs.GROUP_STRUCTURES["{{ settings_energyGroup }}"]
    )
    mgxs_lib.correction = None
    mgxs_lib.mgxs_types = [
        "total",
        "absorption",
        "nu-fission",
        "fission",
        "nu-scatter matrix",
        "multiplicity matrix",
        "chi",
    ]
    mgxs_lib.domain_type = "material"
    mgxs_lib._domains = materials
    mgxs_lib.by_nuclide = False
    mgxs_lib.check_library_for_openmc_mgxs()
    mgxs_lib.build_library()
    return mgxs_lib
{% endif %}

def create_geometry():
    univ = openmc.DAGMCUniverse(
        filename="{{ dagmcFilename }}",
        auto_geom_ids=True,
    )
    {% if reflectivePlanes_useReflectivePlanes == '1' %}
    {{ planes }}
    univ = openmc.Cell(
        region={{ region }},
        fill=univ.bounded_universe(),
    )
    g = openmc.Geometry([univ])
    {% elif hasGraveyard %}
    g = openmc.Geometry(univ)
    {% else %}
    g = openmc.Geometry(univ.bounded_universe())
    {% endif %}
    g.export_to_xml()
    return g


def create_materials():
    {% filter indent(width=4) %}
    {{ materials }}
    {% endfilter %}
    {% if settings_materialDefinition == 'library' %}
    materials.download_cross_section_data(
        libraries=["{{ settings_materialLibrary }}"],
        destination="{{ materialDirectory }}",
    )
    {% endif %}
    {% if settings_materialDefinition == 'mgxs' %}
    materials.cross_sections = "{{ mgxsFile }}"
    {% endif %}
    materials.export_to_xml()
    return materials


def create_settings():
    settings = openmc.Settings()
    {% if settings_materialDefinition == 'mgxs' %}
    settings.energy_mode = "multi-group"
    {% endif %}
    settings.batches = {{ settings_batches }}
    settings.statepoint = dict(
        batches={{ batchSequence }},
    )
{% if settings_run_mode == "eigenvalue"  %}
    settings.inactive = {{ settings_inactive }}
{% endif %}
    settings.particles = {{ settings_particles }}
    settings.temperature = dict(
        method="interpolation",
    )
{% if settings_varianceReduction == "weight_windows_mesh" or settings_varianceReduction == "weight_windows_tally" %}
    settings.max_history_splits = {{ settings_max_splits }}
{% elif settings_varianceReduction == "weight_windows_file" %}
    settings.weight_windows = openmc.hdf5_to_wws("{{ weightWindowsFile }}")
{% endif %}
    settings.output = dict(
        summary={{ generateMGXS }},
        tallies=False,
    )
    settings.source = [
        {% filter indent(width=8) %}
        {{ sources }}
        {% endfilter %}
    ]
    settings.run_mode = "{{ settings_run_mode }}"
    settings.photon_transport = {{ settings_photon_transport == '1' and settings_materialDefinition == 'library' }}
{% if settings_varianceReduction == "survival_biasing" %}
    settings.survival_biasing = True
    settings.cutoff = {
        "weight": {{ survivalBiasing_weight }},
        "weight_avg": {{ survivalBiasing_weight_avg }},
    }
{% elif settings_varianceReduction == "weight_windows_mesh" %}
    {{ weightWindowsMesh | indent(4) }}
    settings.weight_window_generators = openmc.WeightWindowGenerator(
        mesh=m,
        particle_type="{{ weightWindows_particle }}"
    )
{% endif  %}
    settings.export_to_xml()
    openmc.lib.init(output=False)
    p = openmc.lib.sample_external_source(n_samples={{ maxSampleSourceParticles }})
    openmc.source.write_source_file(p, "{{ sourceFile }}")
    openmc.lib.finalize()
    return settings


def create_tallies(geometry, materials):
    {% filter indent(width=4) %}
    {{ tallies }}
    {% endfilter %}
    {% if generateMGXS %}
    mgxs_lib = create_mgxs_library(geometry, materials)
    mgxs_lib.add_to_tallies_file(tallies, merge=True)
    {% else %}
    mgxs_lib = None
    {% endif %}
    tallies.export_to_xml()
    return mgxs_lib


g = create_geometry()
m = create_materials()
s = create_settings()
mgxs_lib = create_tallies(g, m)
{% if not isPythonSource %}
import sirepo.template
sirepo.template.import_module('openmc').write_volume_outlines()
{% endif %}
{{ runCommand }}
{{ saveWeightWindowsFile }}

{% if generateMGXS %}
mgxs_lib.load_from_statepoint(openmc.StatePoint(f"statepoint.{s.batches}.h5"))
mgxs_lib.create_mg_library(
    xs_type="macro", xsdata_names=[m.name for m in mgxs_lib.domains]
).export_to_hdf5("{{ mgxsFile }}")
{% endif %}
