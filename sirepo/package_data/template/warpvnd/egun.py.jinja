
#prevent GIST from starting upon setup
wp.top.lprntpara = False
wp.top.lpsplots = False

wp.top.verbosity = 0 # Reduce solver verbosity
solverE.mgverbose = 0 #further reduce output upon stepping - prevents websocket timeouts in Jupyter notebook

#Adjusting the multigrid parameter here improves convergence speed
#omega = 2./(1. + np.sin(np.pi/min(NUM_X+1,NUM_Z+1)))
#solverE.mgparam = omega

init_iters = 20000
regular_iters = 1000

init_tol = 1e-6
regular_tol = 1e-6

solverE.mgmaxiters = init_iters
solverE.mgtol = init_tol
wp.package("w3d")
wp.generate()
solverE.mgtol = regular_tol
solverE.mgmaxiters = regular_iters

#----

ITERATIONS = 5 #number of iterations to run for steady state solver - Default to 5

def update_status_file(num, save_current=False):
    if not can_write_files:
        return
    status_file = '{{ egunStatusFile }}'
    tmp_file = status_file + '.tmp'
    with open(tmp_file, 'w') as f:
        f.write('{} / {}'.format(num, ITERATIONS + 1))
    os.rename(tmp_file, status_file)

    if save_current:
        # save current state, h5 files don't seem to capture the state
        current_file = '{{ egunCurrentFile }}'
        curr = np.append([wp.top.time], -1 * wp.top.curr).flatten()
        if (num <= 1):
            v = [curr]
        else:
            v = np.load(current_file)
            v = np.append(v, [curr], axis=0)
        np.save(tmp_file, v)
        os.rename(tmp_file + '.npy', current_file)

update_status_file(0.25)

for num in range(ITERATIONS):
    gun(1, ipstep=1, lvariabletimestep=1) #, maxtime=0.25*tof_expected)
    update_status_file(num + 1, save_current=True)

#---
# particle trajectories

if can_write_files:
    #Grab the list of valid IDs
    pids = np.unique(wp.top.pgroup.pid)
    MAX_TRAJECTORIES = 100 #number of particle trajectories to plot
    #get the positions for a select number of particles to be plotted
    particles = [[[], [], []], [[], [], []]]
    for ID in pids[:MAX_TRAJECTORIES]:
        xvals = wp.getx()[wp.selectparticles(ssn=int(ID))]
        yvals = wp.gety()[wp.selectparticles(ssn=int(ID))]
        zvals = wp.getz()[wp.selectparticles(ssn=int(ID))]
        particles[0][0].append(xvals)
        particles[0][1].append(zvals)
        particles[0][2].append(yvals)

    update_status_file(ITERATIONS + 1)
    with open("{{ particleFile }}", "wb") as f:
        f.write(msgpack.packb(dict(
            kept=array_to_list(particles[0]),
            lost=array_to_list(particles[1]),
        )))
