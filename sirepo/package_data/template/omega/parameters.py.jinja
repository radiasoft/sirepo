
from pykern import pkio
from pykern.pkcollections import PKDict
from rsbeams.rsdata import switchyard
from sirepo.template.lattice import LatticeUtil
import numpy
import os
import re
import sirepo.pkcli.elegant
import sirepo.pkcli.genesis
import sirepo.pkcli.opal
import sirepo.sim_data
import sirepo.simulation_db
import sirepo.template.opal


_OMEGA_SIM_NAME = '{{ simulation_name }}'
_GENESIS_PARTICLE_COLUMN_COUNT = 6
assert os.environ['SIREPO_SIMULATION_DB_LOGGED_IN_USER'], 'missing user id env var'


def convert_bunched_beam_to_sdds_beam(data, filename):
    s = sirepo.sim_data.get_class('elegant')
    cmd = LatticeUtil.find_first_command(data, "bunched_beam")
    for k in list(cmd.keys()):
        if k != '_id':
            del cmd[k]
    s.update_model_defaults(cmd, 'command_sdds_beam')
    cmd._type = 'sdds_beam'
    data.models.bunchSource.inputSource = 'sdds_beam'


def file_name_from_sim_name(sim_type, sim_name):
    res = re.sub(r'[^0-9a-zA-Z]', '_', sim_name)
    res = re.sub(r'^\_+|\_+$', '', res)
    res = re.sub(r'\_+', '_', res)
    ext = "sdds" if sim_type == "elegant" else "dat"
    return f"{res}.{ext}"


def genesis_to_pmd(sim):
    import pmd_beamphysics.interfaces.genesis
    import pmd_beamphysics.particles

    g = read_sim("genesis", sim.sim_id)
    d = numpy.fromfile(sim.outfile_path, dtype=numpy.float64)
    d = d.reshape(int(len(d) / _GENESIS_PARTICLE_COLUMN_COUNT / g.models.electronBeam.npart), _GENESIS_PARTICLE_COLUMN_COUNT, g.models.electronBeam.npart)
    # phase must be > 0 to avoid wrapping
    d[:,1,:] -= numpy.min(d[:,1,:])
    v = pmd_beamphysics.particles.ParticleGroup(
        data=pmd_beamphysics.interfaces.genesis.genesis2_dpa_to_data(
            d, xlamds=g.models.radiation.xlamds, current=numpy.array([g.models.electronBeam.curpeak]),
            # compute required wavelengths to hold the whole beam
            zsep=numpy.max(d[:,1,:]) / (2 * numpy.pi),
        )
    )
    # center psi
    v.t -= numpy.mean(v.t)
    return v


def prep_run_dir(run_dir, data):
    sirepo.simulation_db.prepare_simulation(data, run_dir)
    return pkio.save_chdir(run_dir)


def read_sim(sim_type, sim_id):
    return sirepo.sim_data.get_class(sim_type).sim_db_read_sim(sim_id)


def run_elegant(run_dir, elegant_id, prev_sim=None):
    def _save_lib_files(tmp, filename):
        s = sirepo.sim_data.get_class("elegant")
        b = s.lib_file_name_with_model_field("bunchFile", "sourceFile", filename)
        s.lib_file_write(b, tmp)
        c = s.sim_db_client()
        c.copy(
            c.uri(c.LIB_DIR, b),
            c.uri(
                c.LIB_DIR,
                s.lib_file_name_with_model_field("command_run_setup", "expand_for", filename),
            ),
        )
        tmp.remove()

    def _update_sim(data, filename, prev_sim):
        if data.models.bunchSource.inputSource == 'bunched_beam':
            convert_bunched_beam_to_sdds_beam(data, filename)
        assert data.models.bunchSource.inputSource == 'sdds_beam'
        cmd = LatticeUtil.find_first_command(data, "sdds_beam")
        cmd.input = filename
        cmd.center_arrival_time = '1'
        cmd.center_transversely = '1'
        cmd.reverse_t_sign = '1'
        LatticeUtil.find_first_command(data, "run_setup").expand_for = filename
        write_sim(data)

    data = read_sim('elegant', elegant_id)
    if prev_sim:
        assert prev_sim.outfile_path
        filename = file_name_from_sim_name('elegant', f'{_OMEGA_SIM_NAME}-{run_dir.basename}')
        _update_sim(data, filename, prev_sim)
        t = run_dir.join("omega-elegant-bunch")
        if prev_sim.sim_type == 'elegant':
            pkio.py_path(prev_sim.outfile_path).copy(t)
        elif prev_sim.sim_type == 'genesis':
            import pmd_beamphysics.interfaces.elegant

            pmd_beamphysics.interfaces.elegant.write_elegant(
                genesis_to_pmd(prev_sim),
                str(t),
            )
        else:
            sw = switchyard.Switchyard()
            sw.read(f'{prev_sim.outfile_path}', prev_sim.sim_type)
            sw.write(str(t), 'elegant')
        _save_lib_files(t, filename)
    data.computeModel = 'animation'
    if 'report' in data:
        del data['report']
    with prep_run_dir(run_dir, data):
        sirepo.pkcli.elegant.run_elegant()
    return f'{run_dir}/run_setup.output.sdds'


def run_genesis(run_dir, genesis_id, prev_sim=None):
    def _save_lib_file(tmp, filename):
        s = sirepo.sim_data.get_class("genesis")
        s.lib_file_write(
            s.lib_file_name_with_model_field("io", "partfile", filename),
            tmp,
        )
        tmp.remove()

    def _update_sim(data, filename, tmp):
        io = data.models.io
        io.partfile = filename
        io.ippart = 0
        io.ipradi = 0
        d = numpy.fromfile(tmp, dtype=numpy.float64)
        n = len(d) / _GENESIS_PARTICLE_COLUMN_COUNT
        factor = 4 * data.models.particleLoading.nbins
        data.models.electronBeam.npart = int(n / factor) * factor
        # clip particle count to match npart
        d = d.reshape(_GENESIS_PARTICLE_COLUMN_COUNT, int(n))
        d = d[:, :data.models.electronBeam.npart]
        with open(tmp, 'wb') as f:
            d.tofile(f)
        _save_lib_file(tmp, filename)
        write_sim(data)

    data = read_sim('genesis', genesis_id)
    if prev_sim:
        assert prev_sim.outfile_path
        filename = file_name_from_sim_name(
            "genesis", f"{_OMEGA_SIM_NAME}-{run_dir.basename}"
        )
        t = run_dir.join("omega-genesis-partfile")
        if prev_sim.sim_type == "genesis":
            # center longitudinal
            with open(prev_sim.outfile_path, 'rb') as f:
                d = numpy.fromfile(f, dtype=numpy.float64)
            d = d.reshape((_GENESIS_PARTICLE_COLUMN_COUNT, int(len(d) / _GENESIS_PARTICLE_COLUMN_COUNT)))
            d[1,:] -= numpy.mean(d[1,:])
            with open(t, 'wb') as f:
                d.tofile(f)
        else:
            if prev_sim.sim_type == "elegant":
                p = switchyard.read_elegant(f"{prev_sim.outfile_path}")
            else:
                assert prev_sim.sim_type == "opal"
                p = switchyard.read_opal(f"{prev_sim.outfile_path}")
            particle_data = numpy.zeros([_GENESIS_PARTICLE_COLUMN_COUNT, len(p.x)])
            for i, col in enumerate(['pt', 'ct', 'x', 'y', 'ux', 'uy']):
                particle_data[i, :] = getattr(p, col)
            #TODO(pjm): [0] should be gamma not momentum
            particle_data[1] *= 2 * numpy.pi / data.models.radiation.xlamds
            particle_data[1] -= numpy.mean(particle_data[1])
            with open(t, "wb") as f:
                particle_data.tofile(f)
        _update_sim(data, filename, t)
    data.computeModel = 'animation'
    if 'report' in data:
        del data['report']
    with prep_run_dir(run_dir, data):
        sirepo.pkcli.genesis.run_genesis(run_dir)
    return f"{run_dir}/genesis.out.dpa"


def run_opal(run_dir, opal_id, prev_sim=None):
    def _save_lib_file(tmp, filename):
        s = sirepo.sim_data.get_class("opal")
        s.lib_file_write(
            s.lib_file_name_with_model_field("command_distribution", "fname", filename),
            tmp,
        )
        tmp.remove()

    def _update_sim(data, filename, tmp):
        d = LatticeUtil.find_first_command(data, "distribution")
        d.type = "FROMFILE"
        d.fname = filename
        n = 0
        zsum = 0
        psum = 0
        # calculate z offset
        with pkio.open_text(tmp) as f:
            for line in f:
                if not n:
                    n = int(line)
                    continue
                r = [v for v in re.split(r"\s+", line.strip())]
                zsum += float(r[4])
                psum += float(r[5])
        d.offsetz = -zsum / n

        b = LatticeUtil.find_first_command(data, "beam")
        b.npart = n
        b.gamma = 0
        b.energy = 0
        #TODO(pjm): handle other particle types
        mass_and_charge = PKDict(
            ELECTRON=0.51099895000e-03,
            PROTON=0.93827208816,
        )
        b.pc = psum / n * mass_and_charge[b.particle]
        _save_lib_file(tmp, filename)
        write_sim(data)

    data = read_sim('opal', opal_id)
    if prev_sim:
        filename = file_name_from_sim_name('opal', f'{_OMEGA_SIM_NAME}-{run_dir.basename}')
        t = run_dir.join("opal-command_distribution")
        if prev_sim.sim_type == 'genesis':
            import pmd_beamphysics.interfaces.opal

            pmd_beamphysics.interfaces.opal.write_opal(
                genesis_to_pmd(prev_sim),
                str(t),
            )
        else:
            assert prev_sim.outfile_path
            sw = switchyard.Switchyard()
            sw.read(f'{prev_sim.outfile_path}', prev_sim.sim_type)
            sw.write(str(t), "opal")
        _update_sim(data, filename, t)
    data.computeModel = 'animation'
    LatticeUtil.find_first_command(data, "option").psdumpfreq = 0
    with prep_run_dir(run_dir, data):
        sirepo.pkcli.opal.run_opal(with_mpi=True)
    return f'{run_dir}/{sirepo.template.opal._OPAL_H5_FILE}'


def run_sims(sim_list):
    prev = None
    for idx in range(len(sim_list)):
        run_dir = pkio.py_path(f'run{idx + 1}')
        pkio.unchecked_remove(run_dir)
        pkio.mkdir_parent(run_dir)
        s = sim_list[idx]
        if s.sim_type == 'opal':
            s.outfile_path = run_opal(run_dir, s.sim_id, prev)
        elif s.sim_type == 'elegant':
            s.outfile_path = run_elegant(run_dir, s.sim_id, prev)
        elif s.sim_type == 'genesis':
            s.outfile_path = run_genesis(run_dir, s.sim_id, prev)
        else:
            raise AssertionError(f"unhandled sim_type={s.sim_type}")
        prev = s



def write_sim(data):
    sirepo.sim_data.get_class(data.simulationType).sim_db_save_sim(data)


run_sims([
{% for sim in simList %}
    PKDict(
        sim_type="{{sim.sim_type}}",
        sim_id="{{sim.sim_id}}",
    ),
{% endfor %}
])
