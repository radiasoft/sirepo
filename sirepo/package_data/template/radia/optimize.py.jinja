{%- macro rsOptFuctionSignature(addQuotes) -%}
{%- for p in optimizer.parameters -%}
{%- for x in e[p].initial -%}
{%- if e[p].offsets[loop.index0] != 0 -%}
    {% if addQuotes %}'{% endif %}{{ fixSpaces(e.title) }}_{{ e[p].fieldNames[loop.index0] }}{% if addQuotes %}'{% endif %},
{%- endif -%}
{%- endfor -%}
{%- endfor -%}
{%- endfor -%}
{%- endmacro -%}

import os
from pykern.pkcollections import PKDict
import sirepo.mpi
import sirepo.util
from sirepo.template import radia_util
from sirepo.template import template_common

VIEW_TYPE_OBJ = "objects"
VIEW_TYPE_FIELD = "fields"

_MODEL_CEE = "cee"
_MODEL_CUBOID = "cuboid"
_MODEL_CYLINDER = "cylinder"
_MODEL_ELL = "ell"
_MODEL_JAY= "jay"
_MODEL_GROUP = "geomGroup"
_MODEL_OBJECT = "geomObject"
_MODEL_EXTRUDED_POINTS = "extrudedPoints"
_MODEL_EXTRUDED_POLY = "extrudedPoly"
_MODEL_RACETRACK = "racetrack"
_MODEL_STL = "stl"
_EXTRUDED_MODELS = (_MODEL_CEE, _MODEL_ELL, _MODEL_JAY, _MODEL_EXTRUDED_POINTS, _MODEL_EXTRUDED_POLY)
_GROUP_MODELS = (_MODEL_GROUP,)
_OBJ_MODELS = (_MODEL_CUBOID, _MODEL_CYLINDER, _MODEL_RACETRACK, _MODEL_OBJECT, _MODEL_STL) + _EXTRUDED_MODELS
_MODELS = _OBJ_MODELS + _GROUP_MODELS

sirepo_objs = {{ objects }}

def _add_object(o, radia_objs, id_map):
    model = o.get("model")
    t = o.get("type")
    sc = o.get("super_classes", [])
    mat = {{ matrix }}
    if _MODEL_OBJECT in sc:
        o.magnetization = radia_util.multiply_vector_by_matrix(o.magnetization, mat)
        o.segments = radia_util.multiply_vector_by_matrix(o.segments, mat)
    if t in _OBJ_MODELS:
        g_id = radia_util.build_object(**o)
        radia_util.apply_color(
            g_id,
            [c / 255.0 for c in tuple(int(o.color.lstrip("#")[i:i+2], 16) for i in (0, 2, 4))]
        )
    if model in _GROUP_MODELS:
        grp = []
        for obj_id in o.members:
            obj = [mobj for mobj in sirepo_objs if mobj["id"] == obj_id][0]
            m = PKDict(obj)
            if m.id not in id_map.values():
                # have not added this object yet
                m_id = _add_object(m, radia_objs, id_map)
                grp.append(m_id)
            else:
                grp.extend(
                    [list(id_map.keys())[list(id_map.values()).index(v)] for v in id_map.values() if v == m.id]
                )
        g_id = radia_util.build_container(grp)
    for transform in o.transforms:
        radia_util.apply_transform(g_id, **transform)
    id_map[g_id] = o.id
    # don't add objects if they are already in a group
    if not o.groupId:
        radia_objs.append(g_id)
    return g_id


def _build_radia_geom():
    id_map = PKDict()
    radia_objs = []
{% if dmpImportFile %}
    with open("{{ dmpImportFile }}", "rb") as f:
        b = f.read()
        g_id = radia_util.load_bin(b)
{% else %}
    for obj in sirepo_objs:
        o = PKDict(obj)
        if o.id in id_map.values():
            continue
        o_id = _add_object(o, radia_objs, id_map)
        id_map[o_id] = o.id
    g_id = radia_util.build_container(radia_objs)
{% endif %}
    return g_id, id_map

def obj_f(g_id):
    def _field_in_plane(y_min, y_max, obj, steps=25):
        int_field = []
        yc = np.linspace(y_min, y_max, steps)
        for y in yc:
            v = rad.FldInt(obj, 'inf', 'ibz', [-150, y, 0.], [150, y, 0.])
            int_field.append(v)
        return np.array([yc, int_field])

    {% if optimizer.objective == "quality" %}
    field_prof = _field_in_plane(-1., 1., obj, steps=125)
    int_bz0 = rad.FldInt(obj, 'inf', 'ibz', [-150, 0., 0.], [150, 0., 0.])
    res = field_prof[1, :] - int_bz0

    np.save(OBJ_FILENAME, res)

    return np.sum(res**2),  res


def parallel_obj_f(_):
    fvec =  np.load(OBJ_FILENAME)
    return np.sum(fvec**2), fvec


# ** Begin **
def main(radius, precision=1e-4, maxiter=4500, min_angle=20., max_area=0.5):
    g_id, id_map = _build_radia_geom()

    res = radia.Solve(g_id, {{ solvePrec }}, {{ solveMaxIter }}, {{ solveMethod }})

    np.save('field_in_plane.npy', _field_in_plane(-1., 1., dipole, steps=125))

    return obj_f(g_id)





