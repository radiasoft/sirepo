from __future__ import absolute_import, division, print_function

import h5py
import os
import re
from pykern.pkcollections import PKDict
import sirepo.util
from sirepo.template import radia_examples
from sirepo.template import radia_tk
from sirepo.template import template_common

VIEW_TYPE_OBJ = 'objects'
VIEW_TYPE_FIELD = 'fields'

_MODEL_BOX = 'box'
_MODEL_GROUP = 'geomGroup'
_MODEL_GROUP_UND = 'geomUndulatorGroup'
_MODEL_OBJECT = 'geomObject'
_GROUP_MODELS = (_MODEL_GROUP, _MODEL_GROUP_UND)
_OBJ_MODELS = (_MODEL_BOX, _MODEL_OBJECT)
_MODELS = (_MODEL_BOX, _MODEL_GROUP, _MODEL_GROUP_UND, _MODEL_OBJECT)

radia_objs = []
sirepo_objs = {{ objects }}


def _add_object(o):
    if o.model == _MODEL_BOX:
        ctr = sirepo.util.split_comma_delimited_string(o.center, float)
        sz = sirepo.util.split_comma_delimited_string(o.size, float)
        m = sirepo.util.split_comma_delimited_string(o.magnetization, float)
        div = sirepo.util.split_comma_delimited_string(o.division, int) if o.doDivide != '0' else None
        g_id = radia_tk.build_box(ctr, sz, o.material, m, div, h_m_curve=o.h_m_curve)
        if o.color:
            radia_tk.apply_color(
                g_id,
                [c / 255.0 for c in tuple(int(o.color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4))]
            )
    if o.model in _GROUP_MODELS:
        grp = []
        for obj_id in o.members:
            obj = [mobj for mobj in sirepo_objs if mobj['id'] == obj_id][0]
            m = PKDict(obj)
            if m.mapId not in id_map:
                # have not added this yet
                grp.append(_add_object(m))
            else:
                grp.append(id_map[m.mapId] )
        g_id = radia_tk.build_container(grp)
    for transform in o.transforms:
        radia_tk.apply_transform(g_id, PKDict(transform))
    id_map[o.mapId] = g_id
    radia_objs.append(g_id)
    return g_id

id_map = PKDict()
{% if isExample %}
g_id = radia_examples.EXAMPLES['{{ geomName }}']()
{% elif dmpImportFile %}
with open('{{ dmpImportFile }}', 'rb') as f:
    b = f.read()
    g_id = radia_tk.load_bin(b)
{% else %}
for obj in sirepo_objs:
    o = PKDict(obj)
    if o.model not in _MODELS or o.mapId in id_map:
        continue
    g_id = _add_object(o)
    id_map[o.mapId] = g_id
    radia_objs.append(g_id)
# put all objects in a container for now
g_id = radia_tk.build_container(radia_objs)
{% endif %}


g_data = radia_tk.geom_to_data(g_id, name='{{ geomName }}')
with h5py.File('{{ dataFile }}', 'a') as hf:
    template_common.dict_to_h5(g_data, hf, path='{{ h5ObjPath }}')
    template_common.dict_to_h5(id_map, hf, path='idMap')

{% if doSolve %}
res = radia_tk.solve(g_id, {{ solvePrec }}, {{ solveMaxIter }}, {{ solveMethod }})
with h5py.File('{{ dataFile }}', 'a') as hf:
    template_common.dict_to_h5(res, hf, path='{{ h5SolutionPath }}')
{% endif %}

{% if viewType == VIEW_TYPE_FIELD %}
{% if fieldType == FIELD_TYPE_MAG_M %}
f = radia_tk.get_magnetization(g_id)
{% elif fieldType in POINT_FIELD_TYPES %}
f = radia_tk.get_field(g_id, '{{ fieldType }}', {{ fieldPoints }})
{% else %}
f = None
{% endif %}
if f:
    g_data = radia_tk.vector_field_to_data(g_id, '{{ geomName }}', f, radia_tk.FIELD_UNITS['{{ fieldType }}'])
    with h5py.File('{{ dataFile }}', 'a') as hf:
        template_common.dict_to_h5(g_data, hf, path='{{ h5FieldPath }}')
{% endif %}

with open('{{ dmpOutputFile }}', 'wb') as f:
    f.write(radia_tk.dump_bin(g_id))
